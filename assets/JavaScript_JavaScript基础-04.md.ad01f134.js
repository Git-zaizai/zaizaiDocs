import{_ as s}from"./chunks/图片1.7999a557.js";import{_ as a,o as n,c as l,Q as p}from"./chunks/framework.7518ccd6.js";const e="/zaizaiDocs/assets/图片4.4221aee5.png",o="/zaizaiDocs/assets/图片2.e3639cd2.png",r="/zaizaiDocs/assets/图片3.26d49fc9.png",C=JSON.parse('{"title":"JavaScript 基础-4 篇","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/JavaScript基础-04.md","filePath":"JavaScript/JavaScript基础-04.md","lastUpdated":1722251927000}'),t={name:"JavaScript/JavaScript基础-04.md"},c=p(`<h1 id="javascript-基础-4-篇" tabindex="-1">JavaScript 基础-4 篇 <a class="header-anchor" href="#javascript-基础-4-篇" aria-label="Permalink to &quot;JavaScript 基础-4 篇&quot;">​</a></h1><h2 id="_1-数组" tabindex="-1">1 - 数组 <a class="header-anchor" href="#_1-数组" aria-label="Permalink to &quot;1 - 数组&quot;">​</a></h2><h3 id="_1-1-数组的概念" tabindex="-1">1.1 数组的概念 <a class="header-anchor" href="#_1-1-数组的概念" aria-label="Permalink to &quot;1.1 数组的概念&quot;">​</a></h3><ul><li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li><li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。</li></ul><h3 id="_1-2-创建数组" tabindex="-1">1.2 创建数组 <a class="header-anchor" href="#_1-2-创建数组" aria-label="Permalink to &quot;1.2 创建数组&quot;">​</a></h3><p>JS 中创建数组有两种方式：</p><ul><li>利用 new 创建数组</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">数组名</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Array</span><span style="color:#ABB2BF;">() ；</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Array</span><span style="color:#ABB2BF;">();   </span><span style="color:#7F848E;font-style:italic;">// 创建一个新的空数组</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意 Array () ，A 要大写</p><ul><li><p>利用数组字面量创建数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//1. 使用数组字面量方式创建空的数组</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">数组名</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//2. 使用数组字面量方式创建带初始值的数组</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">数组名</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;小白&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;小黑&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;大黄&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;瑞奇&#39;</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>数组的字面量是方括号 [ ]</li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul></li><li><p>数组元素的类型</p><p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arrStus</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;小白&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">28.9</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_1-3-获取数组中的元素" tabindex="-1">1.3 获取数组中的元素 <a class="header-anchor" href="#_1-3-获取数组中的元素" aria-label="Permalink to &quot;1.3 获取数组中的元素&quot;">​</a></h3><p>​ 索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p><p><img src="`+s+`" alt=""></p><p>​ 数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义数组</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arrStus</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取数组中的第2个元素</span></span>
<span class="line"><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrStus</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是 undefined</p><h3 id="_1-4-遍历数组" tabindex="-1">1.4 遍历数组 <a class="header-anchor" href="#_1-4-遍历数组" aria-label="Permalink to &quot;1.4 遍历数组&quot;">​</a></h3><ul><li><p>数组遍历</p><p>​ 把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;green&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;blue&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrStus</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>数组的长度</p><p>数组的长度：默认情况下表示数组中元素的个数</p><p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arrStus</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arrStus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>注意</strong>：</p><ul><li>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</li></ul></li><li><p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p><ul><li>数组的 length 属性可以被修改：</li></ul></li><li><p>如果设置的 length 属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p><ul><li>如果设置的 length 属性值小于数组的元素个数，则会把超过该值的数组元素删除</li></ul></li></ul><h3 id="_1-5-数组中新增元素" tabindex="-1">1.5 数组中新增元素 <a class="header-anchor" href="#_1-5-数组中新增元素" aria-label="Permalink to &quot;1.5 数组中新增元素&quot;">​</a></h3><p>​ 数组中可以通过以下方式在数组的末尾插入新元素：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">数组</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">数组</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">新数据</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2-函数" tabindex="-1">2 - 函数 <a class="header-anchor" href="#_2-函数" aria-label="Permalink to &quot;2 - 函数&quot;">​</a></h2><h3 id="_2-1-函数的概念" tabindex="-1">2.1 函数的概念 <a class="header-anchor" href="#_2-1-函数的概念" aria-label="Permalink to &quot;2.1 函数的概念&quot;">​</a></h3><p>​ 在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for 循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p><p>​ 函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。</p><h3 id="_2-2-函数的使用" tabindex="-1">2.2 函数的使用 <a class="header-anchor" href="#_2-2-函数的使用" aria-label="Permalink to &quot;2.2 函数的使用&quot;">​</a></h3><h4 id="声明函数" tabindex="-1">声明函数 <a class="header-anchor" href="#声明函数" aria-label="Permalink to &quot;声明函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 声明函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">函数名</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//函数体代码</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>function 是声明函数的关键字,必须小写</p></li><li><p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p></li></ul><h4 id="调用函数" tabindex="-1">调用函数 <a class="header-anchor" href="#调用函数" aria-label="Permalink to &quot;调用函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 调用函数</span></span>
<span class="line"><span style="color:#61AFEF;">函数名</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 通过调用函数名来执行函数体代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>调用的时候千万不要忘记添加小括号</p></li><li><p>口诀：函数不调用，自己不执行</p><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p></li></ul><h4 id="函数的封装" tabindex="-1">函数的封装 <a class="header-anchor" href="#函数的封装" aria-label="Permalink to &quot;函数的封装&quot;">​</a></h4><ul><li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p></li><li><p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）</p><p><img src="`+e+`" alt=""></p><p>例子：封装计算 1-100 累加和</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   计算1-100之间值的函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 声明函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getSum</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">sumNum</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 准备一个变量，保存数字和</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">sumNum</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 把每个数值 都累加 到变量中</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sumNum</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用函数</span></span>
<span class="line"><span style="color:#61AFEF;">getSum</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h3 id="_2-3-函数的参数" tabindex="-1">2.3 函数的参数 <a class="header-anchor" href="#_2-3-函数的参数" aria-label="Permalink to &quot;2.3 函数的参数&quot;">​</a></h3><h4 id="函数参数语法" tabindex="-1">函数参数语法 <a class="header-anchor" href="#函数参数语法" aria-label="Permalink to &quot;函数参数语法&quot;">​</a></h4><ul><li><p>形参：函数定义时设置接收调用时传入</p></li><li><p>实参：函数调用时传入小括号内的真实数据</p><p><img src="`+o+`" alt=""></p><p>​ 参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p><p>函数参数的运用：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 带参数的函数声明</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">函数名</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">形参1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">形参2</span><span style="color:#ABB2BF;"> , </span><span style="color:#E06C75;font-style:italic;">形参3</span><span style="color:#ABB2BF;">...) { </span><span style="color:#7F848E;font-style:italic;">// 可以定义任意多的参数，用逗号分隔</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 函数体</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 带参数的函数调用</span></span>
<span class="line"><span style="color:#61AFEF;">函数名</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">实参1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">实参2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">实参3</span><span style="color:#ABB2BF;">...);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol><li>调用的时候实参值是传递给形参的</li><li>形参简单理解为：不用声明的变量</li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ol></li></ul><h4 id="函数形参和实参数量不匹配时" tabindex="-1">函数形参和实参数量不匹配时 <a class="header-anchor" href="#函数形参和实参数量不匹配时" aria-label="Permalink to &quot;函数形参和实参数量不匹配时&quot;">​</a></h4><p><img src="`+r+`" alt=""></p><pre><code>注意：在JavaScript中，形参的默认值是undefined。
</code></pre><p>小结：</p><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li><li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="_2-4-函数的返回值" tabindex="-1">2.4 函数的返回值 <a class="header-anchor" href="#_2-4-函数的返回值" aria-label="Permalink to &quot;2.4 函数的返回值&quot;">​</a></h3><h4 id="return-语句" tabindex="-1">return 语句 <a class="header-anchor" href="#return-语句" aria-label="Permalink to &quot;return 语句&quot;">​</a></h4><pre><code>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。
</code></pre><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 声明函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">函数名</span><span style="color:#ABB2BF;">（）{</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">需要返回的值</span><span style="color:#ABB2BF;">；</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用函数</span></span>
<span class="line"><span style="color:#61AFEF;">函数名</span><span style="color:#ABB2BF;">();    </span><span style="color:#7F848E;font-style:italic;">// 此时调用函数就可以得到函数体内return 后面的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数没有 return ，返回的值是 undefined</li></ul><h4 id="break-continue-return-的区别" tabindex="-1">break ,continue ,return 的区别 <a class="header-anchor" href="#break-continue-return-的区别" aria-label="Permalink to &quot;break ,continue ,return 的区别&quot;">​</a></h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="_2-5-arguments-的使用" tabindex="-1">2.5 arguments 的使用 <a class="header-anchor" href="#_2-5-arguments-的使用" aria-label="Permalink to &quot;2.5 arguments 的使用&quot;">​</a></h3><p>​ 当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments 实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments 展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 push , pop 等方法</p><p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p></li></ul><h3 id="_2-6-函数案例" tabindex="-1">2.6 函数案例 <a class="header-anchor" href="#_2-6-函数案例" aria-label="Permalink to &quot;2.6 函数案例&quot;">​</a></h3><p>函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。</p><h3 id="_2-7-函数的两种声明方式" tabindex="-1">2.7 函数的两种声明方式 <a class="header-anchor" href="#_2-7-函数的两种声明方式" aria-label="Permalink to &quot;2.7 函数的两种声明方式&quot;">​</a></h3><ul><li><p>自定义函数方式(命名函数)</p><p>利用函数关键字 function 自定义函数方式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 声明定义方式</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {...}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>因为有名字，所以也被称为命名函数</li><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul></li><li><p>函数表达式方式(匿名函数）</p><p>利用函数表达式方式的写法如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){...}；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用的方式，函数调用必须写到函数体下面</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>因为函数没有名字，所以也被称为匿名函数</li><li>这个 fn 里面存储的是一个函数</li><li>函数表达式方式原理跟声明变量方式是一致的</li><li>函数调用的代码必须写到函数体后面</li></ul></li></ul>`,58),i=[c];function B(y,u,d,b,F,A){return n(),l("div",null,i)}const f=a(t,[["render",B]]);export{C as __pageData,f as default};
