import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8218e65d.js";const A=JSON.parse('{"title":"实用工具类型","description":"","frontmatter":{},"headers":[],"relativePath":"TypeScript/实用工具类型.md","filePath":"TypeScript/实用工具类型.md","lastUpdated":1698773156000}'),p={name:"TypeScript/实用工具类型.md"},o=l(`<h1 id="实用工具类型" tabindex="-1">实用工具类型 <a class="header-anchor" href="#实用工具类型" aria-label="Permalink to &quot;实用工具类型&quot;">​</a></h1><p>TypeScript 提供一些工具类型来帮助常见的类型转换。这些类型是全局可见的。</p><h2 id="partial-type" tabindex="-1"><code>Partial&lt;Type&gt;</code> <a class="header-anchor" href="#partial-type" aria-label="Permalink to &quot;\`Partial&lt;Type&gt;\`&quot;">​</a></h2><p>构造类型 <code>Type</code> ，并将它所有的属性设置为可选的。它的返回类型表示输入类型的所有子类型。</p><p>例子:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">updateTodo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">todo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fieldsToUpdate</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Partial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">todo</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">fieldsToUpdate</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">todo1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;organize desk&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;clear clutter&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">todo2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">updateTodo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todo1</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;throw out trash&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="readonly-type" tabindex="-1"><code>Readonly&lt;Type&gt;</code> <a class="header-anchor" href="#readonly-type" aria-label="Permalink to &quot;\`Readonly&lt;Type&gt;\`&quot;">​</a></h2><p>构造类型 <code>Type</code> ，并将它所有的属性设置为 <code>readonly</code> ，也就是说构造出的类型的属性不能被再次赋值。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Readonly</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Delete inactive users&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Error: cannot reassign a readonly property</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这个工具可用来表示在运行时会失败的赋值表达式（比如，当尝试给<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" target="_blank" rel="noreferrer">冻结对象 (opens new window)</a>的属性再次赋值时）。</p><h3 id="object-freeze" tabindex="-1"><code>Object.freeze</code> <a class="header-anchor" href="#object-freeze" aria-label="Permalink to &quot;\`Object.freeze\`&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Readonly</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="record-keys-type" tabindex="-1"><code>Record&lt;Keys, Type&gt;</code> <a class="header-anchor" href="#record-keys-type" aria-label="Permalink to &quot;\`Record&lt;Keys, Type&gt;\`&quot;">​</a></h2><p>构造一个类型，其属性名的类型为 <code>K</code> ，属性值的类型为 <code>T</code> 。这个工具可用来将某个类型的属性映射到另一个类型上。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">PageInfo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Page</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;about&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;contact&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Page</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PageInfo</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">about</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;about&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">contact</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;contact&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">home</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="pick-type-keys" tabindex="-1"><code>Pick&lt;Type, Keys&gt;</code> <a class="header-anchor" href="#pick-type-keys" aria-label="Permalink to &quot;\`Pick&lt;Type, Keys&gt;\`&quot;">​</a></h2><p>从类型 <code>Type</code> 中挑选部分属性 <code>Keys</code> 来构造类型。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">completed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TodoPreview</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;title&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;completed&#39;</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">TodoPreview</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Clean room&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">completed</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="omit-type-keys" tabindex="-1"><code>Omit&lt;Type, Keys&gt;</code> <a class="header-anchor" href="#omit-type-keys" aria-label="Permalink to &quot;\`Omit&lt;Type, Keys&gt;\`&quot;">​</a></h2><p>从类型 <code>Type</code> 中获取所有属性，然后从中剔除 <code>Keys</code> 属性后构造一个类型。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">completed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TodoPreview</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Omit</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;description&#39;</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">TodoPreview</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Clean room&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">completed</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="exclude-type-excludedunion" tabindex="-1"><code>Exclude&lt;Type, ExcludedUnion&gt;</code> <a class="header-anchor" href="#exclude-type-excludedunion" aria-label="Permalink to &quot;\`Exclude&lt;Type, ExcludedUnion&gt;\`&quot;">​</a></h2><p>从类型 <code>Type</code> 中剔除所有可以赋值给 <code>ExcludedUnion</code> 的属性，然后构造一个类型。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Exclude</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// &quot;b&quot; | &quot;c&quot;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Exclude</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// &quot;c&quot;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Exclude</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | (() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// string | number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="extract-type-union" tabindex="-1"><code>Extract&lt;Type, Union&gt;</code> <a class="header-anchor" href="#extract-type-union" aria-label="Permalink to &quot;\`Extract&lt;Type, Union&gt;\`&quot;">​</a></h2><p>从类型 <code>Type</code> 中提取所有可以赋值给 <code>Union</code> 的类型，然后构造一个类型。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Extract</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;f&#39;</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// &quot;a&quot;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Extract</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | (() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// () =&gt; void</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="nonnullable-type" tabindex="-1"><code>NonNullable&lt;Type&gt;</code> <a class="header-anchor" href="#nonnullable-type" aria-label="Permalink to &quot;\`NonNullable&lt;Type&gt;\`&quot;">​</a></h2><p>从类型 <code>Type</code> 中剔除 <code>null</code> 和 <code>undefined</code> ，然后构造一个类型。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NonNullable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// string | number</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NonNullable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[] | </span><span style="color:#E5C07B;">null</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// string[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="parameters-type" tabindex="-1"><code>Parameters&lt;Type&gt;</code> <a class="header-anchor" href="#parameters-type" aria-label="Permalink to &quot;\`Parameters&lt;Type&gt;\`&quot;">​</a></h2><p>由函数类型 <code>Type</code> 的参数类型来构建出一个元组类型。</p><p>例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> }): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    []</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    [s: string]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    [arg: unknown]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">f1</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    [arg: { a: number; b: string; }]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T4</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    unknown[]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T5</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">never</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    never</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T6</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   never</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T7</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   never</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="constructorparameters-type" tabindex="-1"><code>ConstructorParameters&lt;Type&gt;</code> <a class="header-anchor" href="#constructorparameters-type" aria-label="Permalink to &quot;\`ConstructorParameters&lt;Type&gt;\`&quot;">​</a></h2><p>由构造函数类型来构建出一个元组类型或数组类型。 由构造函数类型 <code>Type</code> 的参数类型来构建出一个元组类型。（若 <code>Type</code> 不是构造函数类型，则返回 <code>never</code> ）。</p><p>例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConstructorParameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ErrorConstructor</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    [message?: string | undefined]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConstructorParameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">FunctionConstructor</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    string[]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConstructorParameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">RegExpConstructor</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    [pattern: string | RegExp, flags?: string | undefined]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConstructorParameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   unknown[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T4</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConstructorParameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    never</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Type &#39;Function&#39; does not satisfy the constraint &#39;new (...args: any) =&gt; any&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="returntype-type" tabindex="-1"><code>ReturnType&lt;Type&gt;</code> <a class="header-anchor" href="#returntype-type" aria-label="Permalink to &quot;\`ReturnType&lt;Type&gt;\`&quot;">​</a></h2><p>由函数类型 <code>Type</code> 的返回值类型构建一个新类型。</p><p>例子：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">type T0 = ReturnType&lt;() =&gt; string&gt;;  // string</span></span>
<span class="line"><span style="color:#abb2bf;">type T1 = ReturnType&lt;(s: string) =&gt; void&gt;;  // void</span></span>
<span class="line"><span style="color:#abb2bf;">type T2 = ReturnType&lt;(&lt;T&gt;() =&gt; T)&gt;;  // {}</span></span>
<span class="line"><span style="color:#abb2bf;">type T3 = ReturnType&lt;(&lt;T extends U, U extends number[]&gt;() =&gt; T)&gt;;  // number[]</span></span>
<span class="line"><span style="color:#abb2bf;">type T4 = ReturnType&lt;typeof f1&gt;;  // { a: number, b: string }</span></span>
<span class="line"><span style="color:#abb2bf;">type T5 = ReturnType&lt;any&gt;;  // any</span></span>
<span class="line"><span style="color:#abb2bf;">type T6 = ReturnType&lt;never&gt;;  // any</span></span>
<span class="line"><span style="color:#abb2bf;">type T7 = ReturnType&lt;string&gt;;  // Error</span></span>
<span class="line"><span style="color:#abb2bf;">type T8 = ReturnType&lt;Function&gt;;  // Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="instancetype-type" tabindex="-1"><code>InstanceType&lt;Type&gt;</code> <a class="header-anchor" href="#instancetype-type" aria-label="Permalink to &quot;\`InstanceType&lt;Type&gt;\`&quot;">​</a></h2><p>由构造函数类型 <code>Type</code> 的实例类型来构建一个新类型。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">C</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">InstanceType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">C</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// C</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">InstanceType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// any</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">InstanceType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">never</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// any</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">InstanceType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// Error</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T4</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">InstanceType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="required-type" tabindex="-1"><code>Required&lt;Type&gt;</code> <a class="header-anchor" href="#required-type" aria-label="Permalink to &quot;\`Required&lt;Type&gt;\`&quot;">​</a></h2><p>构建一个类型，使类型 <code>Type</code> 的所有属性为 <code>required</code> 。 与此相反的是<a href="#partialtype"><code>Partial</code></a>。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Props</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">a</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">b</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Props</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> }; </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Required</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Props</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> }; </span><span style="color:#7F848E;font-style:italic;">// Error: property &#39;b&#39; missing</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="thisparametertype-type" tabindex="-1"><code>ThisParameterType&lt;Type&gt;</code> <a class="header-anchor" href="#thisparametertype-type" aria-label="Permalink to &quot;\`ThisParameterType&lt;Type&gt;\`&quot;">​</a></h2><p>从函数类型中提取 [this] 参数的类型。 若函数类型不包含 <code>this</code> 参数，则返回 [unknown]类型。</p><p>例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toHex</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">this</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">numberToString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ThisParameterType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">toHex</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">toHex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="omitthisparameter-type" tabindex="-1"><code>OmitThisParameter&lt;Type&gt;</code> <a class="header-anchor" href="#omitthisparameter-type" aria-label="Permalink to &quot;\`OmitThisParameter&lt;Type&gt;\`&quot;">​</a></h2><p>从 <code>Type</code> 类型中剔除 [<code>this</code>]参数。 若未声明 <code>this</code> 参数，则结果类型为 <code>Type</code> 。 否则，由 <code>Type</code> 类型来构建一个不带 <code>this</code> 参数的类型。 泛型会被忽略，并且只有最后的重载签名会被采用。</p><p>例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toHex</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">this</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fiveToHex</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">OmitThisParameter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">toHex</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">toHex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fiveToHex</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="thistype-type" tabindex="-1"><code>ThisType&lt;Type&gt;</code> <a class="header-anchor" href="#thistype-type" aria-label="Permalink to &quot;\`ThisType&lt;Type&gt;\`&quot;">​</a></h2><p>这个工具不会返回一个转换后的类型。 它做为上下文的<code>this</code> 类型的一个标记。 注意，若想使用此类型，必须启用 <code>--noImplicitThis</code> 。</p><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Compile with --noImplicitThis</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ObjectDescriptor</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">D</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">D</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">methods</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">ThisType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">D</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// Type of &#39;this&#39; in methods is D &amp; M</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">makeObject</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">D</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">desc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ObjectDescriptor</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">D</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;">&gt;): </span><span style="color:#E5C07B;">D</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">object</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">desc</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">object</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">desc</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">D</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">makeObject</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">moveBy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dx</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">dy</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">dx</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Strongly typed this</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">dy</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Strongly typed this</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">moveBy</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>上面例子中， <code>makeObject</code> 参数里的 <code>methods</code> 对象具有一个上下文类型 <code>ThisType&lt;D &amp; M&gt;</code> ，因此 <code>methods</code> 对象的方法里 <code>this</code> 的类型为 <code>{ x: number, y: number } &amp; { moveBy(dx: number, dy: number): number }</code> 。</p><p>在 <code>lib.d.ts</code> 里， <code>ThisType&lt;T&gt;</code> 标识接口是个简单的空接口声明。除了在被识别为对象字面量的上下文类型之外，这个接口与一般的空接口没有什么不同。</p><h2 id="操作字符串的类型" tabindex="-1">操作字符串的类型 <a class="header-anchor" href="#操作字符串的类型" aria-label="Permalink to &quot;操作字符串的类型&quot;">​</a></h2><p>为了便于操作模版字符串字面量，TypeScript 引入了一些能够操作字符串的类型。 更多详情，请自行搜索 <code>模版字面量类型</code></p>`,73),e=[o];function t(r,c,B,y,i,F){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
