import{_ as a,o as l,c as p,Q as n,k as s}from"./chunks/framework.d6ec958f.js";const d=JSON.parse('{"title":"第一章：了解TypeScript","description":"","frontmatter":{},"headers":[],"relativePath":"TypeScript/index.md","filePath":"TypeScript/index.md","lastUpdated":1696918359000}'),e={name:"TypeScript/index.md"},o=n(`<h1 id="第一章-了解typescript" tabindex="-1">第一章：了解TypeScript <a class="header-anchor" href="#第一章-了解typescript" aria-label="Permalink to &quot;第一章：了解TypeScript&quot;">​</a></h1><h2 id="开发环境搭建" tabindex="-1">开发环境搭建 <a class="header-anchor" href="#开发环境搭建" aria-label="Permalink to &quot;开发环境搭建&quot;">​</a></h2><h3 id="_1-1-下载-node-js" tabindex="-1">1.1 下载 node.js <a class="header-anchor" href="#_1-1-下载-node-js" aria-label="Permalink to &quot;1.1 下载 node.js&quot;">​</a></h3><h3 id="_1-2-安装-node-js" tabindex="-1">1.2 安装 node.js <a class="header-anchor" href="#_1-2-安装-node-js" aria-label="Permalink to &quot;1.2 安装 node.js&quot;">​</a></h3><h3 id="_1-3-使用-npm-全局安装-typescript" tabindex="-1">1.3 使用 npm 全局安装 typescript <a class="header-anchor" href="#_1-3-使用-npm-全局安装-typescript" aria-label="Permalink to &quot;1.3 使用 npm 全局安装 typescript&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>npm i -g typescript</p></div><h3 id="_1-4-创建-ts-文件" tabindex="-1">1.4 创建 ts 文件 <a class="header-anchor" href="#_1-4-创建-ts-文件" aria-label="Permalink to &quot;1.4 创建 ts 文件&quot;">​</a></h3><h3 id="_1-5-使用-tsc-对-ts-文件进行编译" tabindex="-1">1.5 使用 tsc 对 ts 文件进行编译 <a class="header-anchor" href="#_1-5-使用-tsc-对-ts-文件进行编译" aria-label="Permalink to &quot;1.5 使用 tsc 对 ts 文件进行编译&quot;">​</a></h3><ul><li>进入命令行</li><li>进入 ts 文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul><h2 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h2><h3 id="_2-1-类型说明" tabindex="-1">2.1 类型说明 <a class="header-anchor" href="#_2-1-类型说明" aria-label="Permalink to &quot;2.1 类型说明&quot;">​</a></h3><ul><li>类型声明是TS非常重要的一个特点</li><li>通过类型声明可以</li><li>指定TS中变量（参数、形参)的类型指定类型后，当为变星赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</li><li>简而言之，类型声明给变星设置了类型，使得变呈只能存储某种类型的值</li><li>语法：</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">变量</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">变量</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">值</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">参数</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">参数</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  ……</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-2-自动类型判断" tabindex="-1">2.2 自动类型判断 <a class="header-anchor" href="#_2-2-自动类型判断" aria-label="Permalink to &quot;2.2 自动类型判断&quot;">​</a></h3><ul><li>TS拥有自动的类型判断机制</li><li>当对变层的声明和X值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变异的声明和赋值时同时进行的。可以省略掉类型声明</li></ul><h3 id="_2-3-类型" tabindex="-1">2.3 类型： <a class="header-anchor" href="#_2-3-类型" aria-label="Permalink to &quot;2.3 类型：&quot;">​</a></h3>`,16),r=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"类型"),s("th",null,"例子"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"number"),s("td",null,"1,3,5"),s("td",null,"任意数字")]),s("tr",null,[s("td",null,"string"),s("td",null,`'hi'，"hi"，hi`),s("td",null,"任意字符串")]),s("tr",null,[s("td",null,"boolean"),s("td",null,"true、false"),s("td",null,"布尔值")]),s("tr",null,[s("td",null,"字面量"),s("td",null,"其本身"),s("td",null,"限制变量的值就是该字面量的值")]),s("tr",null,[s("td",null,"any"),s("td",null,"*"),s("td",null,"任意类型")]),s("tr",null,[s("td",null,"unknown"),s("td",null,"*"),s("td",null,"类型安全的的any")]),s("tr",null,[s("td",null,"void"),s("td",null,"空值（undefined）"),s("td",null,"没有值（或undefined）")]),s("tr",null,[s("td",null,"never"),s("td",null,"没有值"),s("td",null,"不能使任何值")]),s("tr",null,[s("td",null,"object"),s("td",{"key:value":""}),s("td",null,"任意的JS对象")]),s("tr",null,[s("td",null,"array"),s("td",null,"[1,2,3]"),s("td",null,"任意JS数组")]),s("tr",null,[s("td",null,"tuple"),s("td",null,"[4,5]"),s("td",null,"元素，TS新增类型，固定长度数组")]),s("tr",null,[s("td",null,"enum"),s("td",{"A,B":""},"enum"),s("td",null,"枚举，TS中新增类型")])])],-1),t=n(`<h2 id="编译选项" tabindex="-1">编译选项 <a class="header-anchor" href="#编译选项" aria-label="Permalink to &quot;编译选项&quot;">​</a></h2><h3 id="_3-1-自动编译文件" tabindex="-1">3.1 自动编译文件 <a class="header-anchor" href="#_3-1-自动编译文件" aria-label="Permalink to &quot;3.1 自动编译文件&quot;">​</a></h3><ul><li>编译文件时，使用-w指令后，TS编译瞄会自动监视文件的变化，并在文件发生变化时对文件进行重新编译</li><li>示例:</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>tsc xxx.ts -w</p></div><h3 id="_3-2-自动编译整个项目" tabindex="-1">3.2 自动编译整个项目 <a class="header-anchor" href="#_3-2-自动编译整个项目" aria-label="Permalink to &quot;3.2 自动编译整个项目&quot;">​</a></h3><ul><li>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</li><li>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</li><li>tsconfig.json是一个JSON文件，添加配置文件后，只需只需tsc 命令即可完成对整个项目的编译</li><li>配置选项:</li></ul><h4 id="_3-2-1-include" tabindex="-1">3.2.1 include <a class="header-anchor" href="#_3-2-1-include" aria-label="Permalink to &quot;3.2.1 include&quot;">​</a></h4><ul><li>定义希望被编译文件所在的目录</li><li>默认值：[&quot;**/*&quot;]</li><li>示例：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;include&quot;</span><span style="color:#ABB2BF;"> : [</span><span style="color:#98C379;">&quot;src/**/* &quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;tests/**/*&quot;</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>上述示例中，所有src目录和tests目录下的文件都会被编译</li></ul><h4 id="_3-2-2-exclude" tabindex="-1">3.2.2 exclude <a class="header-anchor" href="#_3-2-2-exclude" aria-label="Permalink to &quot;3.2.2 exclude&quot;">​</a></h4><ul><li>定义需要排除在外的目录</li><li>默认值:[&quot;node_modules&quot;, &quot;bower_components&quot;,&quot; jspm_packages&quot;]</li><li>示例：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;exclude&quot;</span><span style="color:#ABB2BF;">:[</span><span style="color:#98C379;">&quot;./src/he1lo/**/*&quot;</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-2-3-flles" tabindex="-1">3.2.3 flles <a class="header-anchor" href="#_3-2-3-flles" aria-label="Permalink to &quot;3.2.3 flles&quot;">​</a></h4><ul><li>指定被编译文件的列表，只有需要编译的文件少时才会用到</li><li>示例：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;files&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;core.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">&quot;sys.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;types.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">&quot;scanner.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">&quot;parser.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;utilities.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;binder.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;checker.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">&quot;tsc.ts&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>列表中的文件都会被TS编译器所编译</li></ul><h4 id="_3-2-3-compileroptions" tabindex="-1">3.2.3 compilerOptions <a class="header-anchor" href="#_3-2-3-compileroptions" aria-label="Permalink to &quot;3.2.3 compilerOptions&quot;">​</a></h4><ul><li>编译选项是配置文件中非常重要也比较复杂的配置选项</li><li>在compilerOptions中包含多个子选项，用来完成对编译的配置</li></ul><h5 id="_3-2-3-1-target" tabindex="-1">3.2.3.1 target <a class="header-anchor" href="#_3-2-3-1-target" aria-label="Permalink to &quot;3.2.3.1 target&quot;">​</a></h5><ul><li>设置ts代码编译的目标版本</li><li>可选值: <ul><li>ES3(默认)、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li>示例:</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;ompileroptions&quot;</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E06C75;">&quot;target&quot;</span><span style="color:#ABB2BF;"> : </span><span style="color:#98C379;">&quot;ES6&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>如上设置，我们所编写的tsf尤码将会被编译为ES6版本的js代码</li></ul><h5 id="_3-2-3-2-lib" tabindex="-1">3.2.3.2 lib <a class="header-anchor" href="#_3-2-3-2-lib" aria-label="Permalink to &quot;3.2.3.2 lib&quot;">​</a></h5><ul><li>指定代码运行时所包含的库〔宿主环境)</li><li>可选值: <ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM.webworker、ScriptHost .....</li></ul></li><li>示例:</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;compileroptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;target&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;ES6&quot;</span><span style="color:#FFFFFF;">，</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;Tib&quot;</span><span style="color:#FFFFFF;">:</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;ES6&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;DOM&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;outDir&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;dist &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">，</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;outFile&quot;</span><span style="color:#FFFFFF;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;dist/aa.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_3-2-3-3-module" tabindex="-1">3.2.3.3 module <a class="header-anchor" href="#_3-2-3-3-module" aria-label="Permalink to &quot;3.2.3.3 module&quot;">​</a></h5><ul><li>设置编译后代码使用的模块化系统</li><li>可选值: <ul><li>CommonjS、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li>示例:</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;compileroptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;module&quot;</span><span style="color:#ABB2BF;"> : </span><span style="color:#98C379;">&quot;CommonJs&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_3-2-3-4-outdir" tabindex="-1">3.2.3.4 outDir <a class="header-anchor" href="#_3-2-3-4-outdir" aria-label="Permalink to &quot;3.2.3.4 outDir&quot;">​</a></h5><ul><li>编译后文件的所在目录</li><li>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编泽后文性的位置</li><li>示例：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;compileroptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;outDir &quot;</span><span style="color:#ABB2BF;"> : </span><span style="color:#98C379;">&quot;dist &quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>设置后编译后的js文件将会生成到dist目录</li></ul><h5 id="_3-2-3-5-outfile" tabindex="-1">3.2.3.5 outFile <a class="header-anchor" href="#_3-2-3-5-outfile" aria-label="Permalink to &quot;3.2.3.5 outFile&quot;">​</a></h5><ul><li>将所有的文件编译为一个s文件</li><li>默认会将所有的编写在全局作用域中的代码合并为一个Js文件，如果module制定了None，System或AMD则会将模块—起合并到文件之中</li><li>示例:</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;compileroptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;outFile&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;dist/app.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_3-2-3-6-rootdlr" tabindex="-1">3.2.3.6 rootDlr <a class="header-anchor" href="#_3-2-3-6-rootdlr" aria-label="Permalink to &quot;3.2.3.6 rootDlr&quot;">​</a></h5><ul><li>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</li><li>示例：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;compileroptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;rootDir&quot;</span><span style="color:#ABB2BF;"> : </span><span style="color:#98C379;">&quot;./src&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_3-2-3-7-allowjs" tabindex="-1">3.2.3.7 allowJs <a class="header-anchor" href="#_3-2-3-7-allowjs" aria-label="Permalink to &quot;3.2.3.7 allowJs&quot;">​</a></h5><ul><li>是否对js文件编译</li></ul><h5 id="_3-2-3-8-checkjs" tabindex="-1">3.2.3.8 checkJs <a class="header-anchor" href="#_3-2-3-8-checkjs" aria-label="Permalink to &quot;3.2.3.8 checkJs&quot;">​</a></h5><ul><li>是杏对js文件进行检查</li><li>示例:</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;compileroptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;a11owJs&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  	</span><span style="color:#E06C75;">&quot;checkJs&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="_3-2-3-9-removecomments" tabindex="-1">3.2.3.9 removeComments <a class="header-anchor" href="#_3-2-3-9-removecomments" aria-label="Permalink to &quot;3.2.3.9 removeComments&quot;">​</a></h5><ul><li>是否删除注释</li><li>默认值: false</li></ul><h5 id="_3-2-3-10-noemit" tabindex="-1">3.2.3.10 noEmit <a class="header-anchor" href="#_3-2-3-10-noemit" aria-label="Permalink to &quot;3.2.3.10 noEmit&quot;">​</a></h5><ul><li>不对代码进行编译</li><li>默认值: false</li></ul><h5 id="_3-2-3-11-sourcemap" tabindex="-1">3.2.3.11 sourceMap <a class="header-anchor" href="#_3-2-3-11-sourcemap" aria-label="Permalink to &quot;3.2.3.11 sourceMap&quot;">​</a></h5><ul><li>是否生成sourceMap</li><li>默认值: false</li></ul><h5 id="_3-2-3-12-严格检查" tabindex="-1">3.2.3.12 严格检查 <a class="header-anchor" href="#_3-2-3-12-严格检查" aria-label="Permalink to &quot;3.2.3.12 严格检查&quot;">​</a></h5><ul><li>&quot;strict&quot;: true 启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li><li>alwaysStrict：编译后的文件是否使用严格模式</li><li>noImplicitAny：不循序隐式的any类型</li><li>noImplicitThis：不允许不明确类型的this</li><li>strictNullChecks：严格的检查空值</li><li>示例:</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;compileroptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;alwaysStrict&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;noImplicitAny&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  	</span><span style="color:#E06C75;">&quot;noImplicitThis&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  	</span><span style="color:#E06C75;">&quot;strictNullChecks&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h1 id="第二章-面向对象" tabindex="-1">第二章：面向对象 <a class="header-anchor" href="#第二章-面向对象" aria-label="Permalink to &quot;第二章：面向对象&quot;">​</a></h1><h2 id="类-class" tabindex="-1">类（class） <a class="header-anchor" href="#类-class" aria-label="Permalink to &quot;类（class）&quot;">​</a></h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对貌。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说:可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><h3 id="_1-1-定义类" tabindex="-1">1.1 定义类: <a class="header-anchor" href="#_1-1-定义类" aria-label="Permalink to &quot;1.1 定义类:&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">类名</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">属性</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">参数</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">属性名</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">参数</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">方法名</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    ……</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>示例：</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`我叫 </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> 今年 </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> 岁\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xiaozhupeiqi&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_1-2-定义继承类" tabindex="-1">1.2 定义继承类： <a class="header-anchor" href="#_1-2-定义继承类" aria-label="Permalink to &quot;1.2 定义继承类：&quot;">​</a></h3><ul><li>示例：</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// abstract 抽象类，只能被继承不能被实例化</span></span>
<span class="line"><span style="color:#C678DD;">abstract</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`我叫 </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> 今年 </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> 岁\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写 </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">abstract</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">isRun</span><span style="color:#ABB2BF;">():</span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">   		</span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">     	</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">age</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">isRun</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我能跑&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  	</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Dog</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xiaozhupeiqi&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isRun</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="_1-3-属性封装类" tabindex="-1">1.3 属性封装类： <a class="header-anchor" href="#_1-3-属性封装类" aria-label="Permalink to &quot;1.3 属性封装类：&quot;">​</a></h3><ul><li>public：修饰的属性可以在任意位置访问（修改）默认值</li><li>private：私有属性，只能在类内部进行访问（修改）</li><li>protected：受包含的属性，只能在当前类和当前类的子类中访问（修改）</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">类名</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">属性</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">参数</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">属性名</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">参数</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 定义方法获取属性</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">方法名</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">属性</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 定义方法修改属性</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">方法名</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">形参</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">属性</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">形参</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>示例：</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 方法获取 name</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// getName(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//   return this.name</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// TS写法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">get</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 方法获取 age</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// getAge(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//   return this.age</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// TS写法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">get</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">age</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 方法修改 name</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// setName(name:string){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//   this.name = name</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// TS写法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 方法修改 age，是否修改属性值的主动权掌握在手中</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">// setAge(age:number){</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">//   if(age&gt;=0){</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">//     this.age = age</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">//   }</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// TS写法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">age</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">age</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xiaozhupeiqi&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 传统写法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(per.setName(&#39;XXX&#39;),per.setAge(111));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(per.getName(),per.getAge()); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// TS写法</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;XXX&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">111</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h2 id="_2、接口-interface" tabindex="-1">2、接口（interface） <a class="header-anchor" href="#_2、接口-interface" aria-label="Permalink to &quot;2、接口（interface）&quot;">​</a></h2><p>接口用来定义一个类结构，接口中的所有属性都不能有实际的值，接口只定义对象的结构，二不考虑实际的值，在接口中所有的方法都是抽象方法</p><h3 id="_2-1-定义简单接口" tabindex="-1">2.1 定义简单接口 <a class="header-anchor" href="#_2-1-定义简单接口" aria-label="Permalink to &quot;2.1 定义简单接口&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">接口名称</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">属性</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">名称</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">接口名称</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E06C75;">属性</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">数据</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>示例：</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">xiaozhupeiqi</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">zhu</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">xiaozhupeiqi</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;baba&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-2-定义有方法的接口" tabindex="-1">2.2 定义有方法的接口 <a class="header-anchor" href="#_2-2-定义有方法的接口" aria-label="Permalink to &quot;2.2 定义有方法的接口&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">接口名称</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">属性</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">方法名</span><span style="color:#ABB2BF;">():</span><span style="color:#E5C07B;">返回类型</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">类名称</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">implements</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">接口名称</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">属性</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">参数</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">属性</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">参数</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 实现接口方法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">方法名</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    ……</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>示例：</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">():</span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">xiaoA</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">implements</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 实现接口方法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    ……</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_3、泛型" tabindex="-1">3、泛型 <a class="header-anchor" href="#_3、泛型" aria-label="Permalink to &quot;3、泛型&quot;">​</a></h2><p>在定义函数是类时，如果类型不明确就可以使用泛型</p><h3 id="_3-1-定义泛型函数、接口、类" tabindex="-1">3.1 定义泛型函数、接口、类 <a class="header-anchor" href="#_3-1-定义泛型函数、接口、类" aria-label="Permalink to &quot;3.1 定义泛型函数、接口、类&quot;">​</a></h3><ul><li>示例：</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// T:泛型函数（可任意指定类型）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// a:泛型形参</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值也是泛型，在调用时接收number类型返回也是number</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不指定类型的函数，TS可以自动进行推断</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在调用时声明传入指定类型</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Inter</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// T extends Inter 表示泛型T必须是Inter实现类（子类）</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn3</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Inter</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn3</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;123&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">fn3</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 泛型T类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyClass</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyClass</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">strign</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;xiaozhupeiqi&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>`,83),c=[o,r,t];function B(i,y,u,b,F,A){return l(),p("div",null,c)}const C=a(e,[["render",B]]);export{d as __pageData,C as default};
