import{_ as s,o as a,c as p,Q as n}from"./chunks/framework.7e1733e5.js";const b=JSON.parse('{"title":"简介","description":"","frontmatter":{"prev":"README.md"},"headers":[],"relativePath":"TypeScript/简介.md","filePath":"TypeScript/简介.md","lastUpdated":1699034132000}'),l={name:"TypeScript/简介.md"},e=n(`<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><p>本部分介绍了在学习 TypeScript 之前需要了解的知识，具体内容包括：</p><ul><li><a href="#什么是TypeScript">什么是 TypeScript</a></li><li><a href="#安装TypeScript">安装 TypeScript</a></li><li><a href="#HelloTypeScript">Hello TypeScript</a></li></ul><h1 id="什么是-typescript" tabindex="-1">什么是 TypeScript<a id="什么是TypeScript"></a> <a class="header-anchor" href="#什么是-typescript" aria-label="Permalink to &quot;什么是 TypeScript&lt;a id=&quot;什么是TypeScript&quot;&gt;&lt;/a&gt;&quot;">​</a></h1><blockquote><p>Typed JavaScript at Any Scale.<br> 添加了类型系统的 JavaScript，适用于任何规模的项目。</p></blockquote><p>以上描述是官网<sup><a href="#link-1">[1]</a></sup>对于 TypeScript 的定义。</p><p>它强调了 TypeScript 的两个最重要的特性——类型系统、适用于任何规模。</p><h2 id="typescript-的特性" tabindex="-1">TypeScript 的特性 <a class="header-anchor" href="#typescript-的特性" aria-label="Permalink to &quot;TypeScript 的特性&quot;">​</a></h2><h3 id="类型系统" tabindex="-1">类型系统 <a class="header-anchor" href="#类型系统" aria-label="Permalink to &quot;类型系统&quot;">​</a></h3><p>从 TypeScript 的名字就可以看出来，「类型」是其最核心的特性。</p><p>我们知道，JavaScript 是一门非常灵活的编程语言：</p><ul><li>它没有类型约束，一个变量可能初始化时是字符串，过一会儿又被赋值为数字。</li><li>由于隐式类型转换的存在，有的变量的类型很难在运行前就确定。</li><li>基于原型的面向对象编程，使得原型上的属性或方法可以在运行时被修改。</li><li>函数是 JavaScript 中的一等公民<sup><a href="#link-2">[2]</a></sup>，可以赋值给变量，也可以当作参数或返回值。</li></ul><p>这种灵活性就像一把双刃剑，一方面使得 JavaScript 蓬勃发展，无所不能，从 2013 年开始就一直蝉联最普遍使用的编程语言排行榜冠军<sup><a href="#link-3">[3]</a></sup>；另一方面也使得它的代码质量参差不齐，维护成本高，运行时错误多。</p><p>而 TypeScript 的类型系统，在很大程度上弥补了 JavaScript 的缺点。</p><h4 id="typescript-是静态类型" tabindex="-1">TypeScript 是静态类型 <a class="header-anchor" href="#typescript-是静态类型" aria-label="Permalink to &quot;TypeScript 是静态类型&quot;">​</a></h4><p>类型系统按照「类型检查的时机」来分类，可以分为动态类型和静态类型。</p><p>动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。JavaScript 是一门解释型语言<sup><a href="#link-4">[4]</a></sup>，没有编译阶段，所以它是动态类型，以下这段代码在运行时才会报错：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Uncaught TypeError: foo.split is not a function</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 运行时会报错（foo.split 不是一个函数），造成线上 bug</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>静态类型是指编译阶段就能确定每个变量的类型，这种语言的类型错误往往会导致语法错误。TypeScript 在运行前需要先编译为 JavaScript，而在编译阶段就会进行类型检查，所以 <strong>TypeScript 是静态类型</strong>，这段 TypeScript 代码在编译阶段就会报错了：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Property &#39;split&#39; does not exist on type &#39;number&#39;.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 编译时会报错（数字没有 split 方法），无法通过编译</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>你可能会奇怪，这段 TypeScript 代码看上去和 JavaScript 没有什么区别呀。</p><p>没错！大部分 JavaScript 代码都只需要经过少量的修改（或者完全不用修改）就变成 TypeScript 代码，这得益于 TypeScript 强大的[类型推论][]，即使不去手动声明变量 <code>foo</code> 的类型，也能在变量初始化时自动推论出它是一个 <code>number</code> 类型。</p><p>完整的 TypeScript 代码是这样的：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Property &#39;split&#39; does not exist on type &#39;number&#39;.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 编译时会报错（数字没有 split 方法），无法通过编译</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="typescript-是弱类型" tabindex="-1">TypeScript 是弱类型 <a class="header-anchor" href="#typescript-是弱类型" aria-label="Permalink to &quot;TypeScript 是弱类型&quot;">​</a></h4><p>类型系统按照「是否允许隐式类型转换」来分类，可以分为强类型和弱类型。</p><p>以下这段代码不管是在 JavaScript 中还是在 TypeScript 中都是可以正常运行的，运行时数字 <code>1</code> 会被隐式类型转换为字符串 <code>&#39;1&#39;</code>，加号 <code>+</code> 被识别为字符串拼接，所以打印出结果是字符串 <code>&#39;11&#39;</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印出字符串 &#39;11&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>TypeScript 是完全兼容 JavaScript 的，它不会修改 JavaScript 运行时的特性，所以<strong>它们都是弱类型</strong>。</p><p>作为对比，Python 是强类型，以下代码会在运行时报错：</p><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>若要修复该错误，需要进行强制类型转换：</p><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 打印出字符串 &#39;11&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>强/弱是相对的，Python 在处理整型和浮点型相加时，会将整型隐式转换为浮点型，但是这并不影响 Python 是强类型的结论，因为大部分情况下 Python 并不会进行隐式类型转换。相比而言，JavaScript 和 TypeScript 中不管加号两侧是什么类型，都可以通过隐式类型转换计算出一个结果——而不是报错——所以 JavaScript 和 TypeScript 都是弱类型。</p></blockquote><blockquote><p>虽然 TypeScript 不限制加号两侧的类型，但是我们可以借助 TypeScript 提供的类型系统，以及 ESLint 提供的代码检查功能，来限制加号两侧必须同为数字或同为字符串<sup><a href="#link-5">[5]</a></sup>。这在一定程度上使得 TypeScript 向「强类型」更近一步了——当然，这种限制是可选的。</p></blockquote><p>这样的类型系统体现了 TypeScript 的核心设计理念<sup><a href="#link-6">[6]</a></sup>：在完整保留 JavaScript 运行时行为的基础上，通过引入静态类型系统来提高代码的可维护性，减少可能出现的 bug。</p><h3 id="适用于任何规模" tabindex="-1">适用于任何规模 <a class="header-anchor" href="#适用于任何规模" aria-label="Permalink to &quot;适用于任何规模&quot;">​</a></h3><p>TypeScript 非常适用于大型项目——这是显而易见的，类型系统可以为大型项目带来更高的可维护性，以及更少的 bug。</p><p>在中小型项目中推行 TypeScript 的最大障碍就是认为使用 TypeScript 需要写额外的代码，降低开发效率。但事实上，由于有[类型推论][]，大部分类型都不需要手动声明了。相反，TypeScript 增强了编辑器（IDE）的功能，包括代码补全、接口提示、跳转到定义、代码重构等，这在很大程度上提高了开发效率。而且 TypeScript 有近百个[编译选项][]，如果你认为类型检查过于严格，那么可以通过修改编译选项来降低类型检查的标准。</p><p>TypeScript 还可以和 JavaScript 共存。这意味着如果你有一个使用 JavaScript 开发的旧项目，又想使用 TypeScript 的特性，那么你不需要急着把整个项目都迁移到 TypeScript，你可以使用 TypeScript 编写新文件，然后在后续更迭中逐步迁移旧文件。如果一些 JavaScript 文件的迁移成本太高，TypeScript 也提供了一个方案，可以让你在不修改 JavaScript 文件的前提下，编写一个[类型声明文件][]，实现旧项目的渐进式迁移。</p><p>事实上，就算你从来没学习过 TypeScript，你也可能已经在不知不觉中使用到了 TypeScript——在 VSCode 编辑器中编写 JavaScript 时，代码补全和接口提示等功能就是通过 TypeScript Language Service 实现的<sup><a href="#link-7">[7]</a></sup>：</p><p><img src="https://ts.xcatliu.com/assets/what-is-typescript-vscode.png" alt="what-is-typescript-vscode"></p><p>一些第三方库原生支持了 TypeScript，在使用时就能获得代码补全了，比如 Vue 3.0<sup><a href="#link-8">[8]</a></sup>：</p><p><img src="https://ts.xcatliu.com/assets/what-is-typescript-vue.png" alt="what-is-typescript-vue"></p><p>有一些第三方库原生不支持 TypeScript，但是可以通过安装社区维护的类型声明库<sup><a href="#link-9">[9]</a></sup>（比如通过运行 <code>npm install --save-dev @types/react</code> 来安装 React 的类型声明库）来获得代码补全能力——不管是在 JavaScript 项目中还是在 TypeScript 中项目中都是支持的：</p><p><img src="https://ts.xcatliu.com/assets/what-is-typescript-react.png" alt="what-is-typescript-react"></p><p>由此可见，TypeScript 的发展已经深入到前端社区的方方面面了，任何规模的项目都或多或少得到了 TypeScript 的支持。</p><h3 id="与标准同步发展" tabindex="-1">与标准同步发展 <a class="header-anchor" href="#与标准同步发展" aria-label="Permalink to &quot;与标准同步发展&quot;">​</a></h3><p>TypeScript 的另一个重要的特性就是坚持与 ECMAScript 标准<sup><a href="#link-10">[10]</a></sup>同步发展。</p><p>ECMAScript 是 JavaScript 核心语法的标准，自 2015 年起，每年都会发布一个新版本，包含一些新的语法。</p><p>一个新的语法从提案到变成正式标准，需要经历以下几个阶段：</p><ul><li>Stage 0：展示阶段，仅仅是提出了讨论、想法，尚未正式提案。</li><li>Stage 1：征求意见阶段，提供抽象的 API 描述，讨论可行性，关键算法等。</li><li>Stage 2：草案阶段，使用正式的规范语言精确描述其语法和语义。</li><li>Stage 3：候选人阶段，语法的设计工作已完成，需要浏览器、Node.js 等环境支持，搜集用户的反馈。</li><li>Stage 4：定案阶段，已准备好将其添加到正式的 ECMAScript 标准中。</li></ul><p>一个语法进入到 Stage 3 阶段后，TypeScript 就会实现它。一方面，让我们可以尽早的使用到最新的语法，帮助它进入到下一个阶段；另一方面，处于 Stage 3 阶段的语法已经比较稳定了，基本不会有语法的变更，这使得我们能够放心的使用它。</p><p>除了实现 ECMAScript 标准之外，TypeScript 团队也推进了诸多语法提案，比如可选链操作符（<code>?.</code>）<sup><a href="#link-11">[11]</a></sup>、空值合并操作符（<code>??</code>）<sup><a href="#link-12">[12]</a></sup>、Throw 表达式<sup><a href="#link-13">[13]</a></sup>、正则匹配索引<sup><a href="#link-14">[14]</a></sup>等。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>什么是 TypeScript？</p><ul><li>TypeScript 是添加了类型系统的 JavaScript，适用于任何规模的项目。</li><li>TypeScript 是一门静态类型、弱类型的语言。</li><li>TypeScript 是完全兼容 JavaScript 的，它不会修改 JavaScript 运行时的特性。</li><li>TypeScript 可以编译为 JavaScript，然后运行在浏览器、Node.js 等任何能运行 JavaScript 的环境中。</li><li>TypeScript 拥有很多编译选项，类型检查的严格程度由你决定。</li><li>TypeScript 可以和 JavaScript 共存，这意味着 JavaScript 项目能够渐进式的迁移到 TypeScript。</li><li>TypeScript 增强了编辑器（IDE）的功能，提供了代码补全、接口提示、跳转到定义、代码重构等能力。</li><li>TypeScript 拥有活跃的社区，大多数常用的第三方库都提供了类型声明。</li><li>TypeScript 与标准同步发展，符合最新的 ECMAScript 标准（stage 3）。</li></ul><h2 id="附-typescript-的发展历史" tabindex="-1">附：TypeScript 的发展历史 <a class="header-anchor" href="#附-typescript-的发展历史" aria-label="Permalink to &quot;附：TypeScript 的发展历史&quot;">​</a></h2><ul><li>2012-10：微软发布了 TypeScript 第一个版本（0.8），此前已经在微软内部开发了两年。</li><li>2014-04：TypeScript 发布了 1.0 版本。</li><li>2014-10：Angular 发布了 2.0 版本，它是一个基于 TypeScript 开发的前端框架。</li><li>2015-01：ts-loader 发布，webpack 可以编译 TypeScript 文件了。</li><li>2015-04：微软发布了 Visual Studio Code，它内置了对 TypeScript 语言的支持，它自身也是用 TypeScript 开发的。</li><li>2016-05：<code>@types/react</code> 发布，TypeScript 可以开发 React 应用了。</li><li>2016-05：<code>@types/node</code> 发布，TypeScript 可以开发 Node.js 应用了。</li><li>2016-09：TypeScript 发布了 2.0 版本。</li><li>2018-06：TypeScript 发布了 3.0 版本。</li><li>2019-02：TypeScript 宣布由官方团队来维护 typescript-eslint，以支持在 TypeScript 文件中运行 ESLint 检查。</li><li>2020-05：Deno 发布了 1.0 版本，它是一个 JavaScript 和 TypeScript 运行时。</li><li>2020-08：TypeScript 发布了 4.0 版本。</li><li>2020-09：Vue 发布了 3.0 版本，官方支持 TypeScript。</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ol><li><span id="link-1"><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript 官网</a></span></li><li><span id="link-2"><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html" target="_blank" rel="noreferrer">第 2 章: 一等公民的函数</a> · 函数式编程指北</span></li><li><span id="link-3"><a href="https://insights.stackoverflow.com/survey/2020" target="_blank" rel="noreferrer">StackOverflow 2020 开发者调查报告</a></span></li><li><span id="link-4"><a href="https://web.stanford.edu/class/cs98si/slides/overview.html" target="_blank" rel="noreferrer">斯坦福 JavaScript 第一课</a></span></li><li><span id="link-5"><a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/restrict-plus-operands.md" target="_blank" rel="noreferrer">TypeScript ESLint 规则 <code>restrict-plus-operands</code></a></span></li><li><span id="link-6"><a href="https://github.com/microsoft/TypeScript/wiki/TypeScript-Design-Goals" target="_blank" rel="noreferrer">TypeScript 设计理念</a></span></li><li><span id="link-7"><a href="https://code.visualstudio.com/docs/languages/typescript" target="_blank" rel="noreferrer">Visual Studio Code 中集成了 TypeScript</a></span></li><li><span id="link-8"><a href="https://v3.vuejs.org/guide/typescript-support.html" target="_blank" rel="noreferrer">Vue 3.0 支持 TypeScript</a></span></li><li><span id="link-9"><a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noreferrer">Definitely Typed</a>——TypeScript 团队帮助维护的类型定义仓库</span></li><li><span id="link-10"><a href="https://tc39.es/process-document/" target="_blank" rel="noreferrer">ECMAScript 标准</a></span></li><li><span id="link-11"><a href="https://github.com/tc39/proposal-optional-chaining" target="_blank" rel="noreferrer">可选链操作符（<code>?.</code>）</a></span></li><li><span id="link-12"><a href="https://github.com/tc39/proposal-nullish-coalescing" target="_blank" rel="noreferrer">空值合并操作符（<code>??</code>）</a></span></li><li><span id="link-13"><a href="https://github.com/tc39/proposal-throw-expressions" target="_blank" rel="noreferrer">Throw 表达式</a></span></li><li><span id="link-14"><a href="https://github.com/tc39/proposal-regexp-match-indices" target="_blank" rel="noreferrer">正则匹配索引</a></span></li></ol><h1 id="安装-typescript" tabindex="-1">安装 TypeScript <a id="安装TypeScript"></a> <a class="header-anchor" href="#安装-typescript" aria-label="Permalink to &quot;安装 TypeScript &lt;a id=&quot;安装TypeScript&quot;&gt;&lt;/a&gt;&quot;">​</a></h1><p>TypeScript 的命令行工具安装方法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">typescript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以上命令会在全局环境下安装 <code>tsc</code> 命令，安装完成之后，我们就可以在任何地方执行 <code>tsc</code> 命令了。</p><p>编译一个 TypeScript 文件很简单：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">tsc</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">hello.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们约定使用 TypeScript 编写的文件以 <code>.ts</code> 为后缀，用 TypeScript 编写 React 时，以 <code>.tsx</code> 为后缀。</p><p>更方便的方法： 全局安装 ts-node 的编译工具，可以将 ts 文件执行</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ts-node</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#安装 ts-node 依赖包</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tslib</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@types/node</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#使用</span></span>
<span class="line"><span style="color:#61AFEF;">ts-node</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">index.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="编辑器" tabindex="-1">编辑器 <a class="header-anchor" href="#编辑器" aria-label="Permalink to &quot;编辑器&quot;">​</a></h2><p>TypeScript 最大的优势之一便是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等。</p><p>主流的编辑器都支持 TypeScript，这里我推荐使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a>。</p><p>它是一款开源，跨终端的轻量级编辑器，内置了对 TypeScript 的支持。</p><p>另外它本身也是<a href="https://github.com/Microsoft/vscode/" target="_blank" rel="noreferrer">用 TypeScript 编写的</a>。</p><p>下载安装：<a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">https://code.visualstudio.com/</a></p><p>获取其他编辑器或 IDE 对 TypeScript 的支持：</p><ul><li><a href="https://github.com/Microsoft/TypeScript-Sublime-Plugin" target="_blank" rel="noreferrer">Sublime Text</a></li><li><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noreferrer">WebStorm</a></li><li><a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support#vim" target="_blank" rel="noreferrer">Vim</a></li><li><a href="https://github.com/ananthakumaran/tide" target="_blank" rel="noreferrer">Emacs</a></li><li><a href="https://github.com/palantir/eclipse-typescript" target="_blank" rel="noreferrer">Eclipse</a></li><li><a href="https://atom.io/packages/atom-typescript" target="_blank" rel="noreferrer">Atom</a></li><li><a href="https://marketplace.visualstudio.com/search?term=TypeScriptTeam&amp;target=VS&amp;category=All%20categories&amp;vsVersion=vs2019&amp;sortBy=UpdatedDate" target="_blank" rel="noreferrer">Visual Studio 2019</a></li><li><a href="https://marketplace.visualstudio.com/search?term=TypeScriptTeam&amp;target=VS&amp;category=All%20categories&amp;vsVersion=vs15&amp;sortBy=UpdatedDate" target="_blank" rel="noreferrer">Visual Studio 2017</a></li></ul><h1 id="hello-typescript" tabindex="-1">Hello TypeScript <a id="HelloTypeScript"></a> <a class="header-anchor" href="#hello-typescript" aria-label="Permalink to &quot;Hello TypeScript &lt;a id=&#39;HelloTypeScript&#39;&gt;&lt;/a&gt;&quot;">​</a></h1><p>我们从一个简单的例子开始。</p><p>将以下代码复制到 <code>hello.ts</code> 中：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">person</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello, &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Tom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后执行</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">tsc</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">hello.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这时候会生成一个编译好的文件 <code>hello.js</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">person</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello, &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Tom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 TypeScript 中，我们使用 <code>:</code> 指定变量的类型，<code>:</code> 的前后有没有空格都可以。</p><p>上述例子中，我们用 <code>:</code> 指定 <code>person</code> 参数类型为 <code>string</code>。但是编译为 js 之后，并没有什么检查的代码被插入进来。</p><p>这是因为 <strong>TypeScript 只会在编译时对类型进行静态检查，如果发现有错误，编译的时候就会报错</strong>。而在运行时，与普通的 JavaScript 文件一样，不会对类型进行检查。</p><p>如果我们需要保证运行时的参数类型，还是得手动对类型进行判断：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">person</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;string&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello, &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;person is not a string&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Tom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p><code>let</code> 是 ES6 中的关键字，和 <code>var</code> 类似，用于定义一个局部变量，可以参阅 <a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noreferrer">let 和 const 命令</a>。</p></blockquote><p>下面尝试把这段代码编译一下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">person</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello, &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>编辑器中会提示错误，编译的时候也会出错：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">hello.ts:6:22</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">error</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">TS2345:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Argument</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;number[]&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">assignable</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">parameter</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;string&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是还是生成了 js 文件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">person</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello, &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是因为 <strong>TypeScript 编译的时候即使报错了，还是会生成编译结果</strong>，我们仍然可以使用这个编译之后的文件。</p><p>如果要在报错的时候终止 js 文件的生成，可以在 <code>tsconfig.json</code> 中配置 <code>noEmitOnError</code> 即可。关于 <code>tsconfig.json</code>，请参阅<a href="http://www.typescriptlang.org/docs/handbook/tsconfig-json.html" target="_blank" rel="noreferrer">官方手册</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html" target="_blank" rel="noreferrer">中文版</a>）。</p>`,100),o=[e];function r(t,c,i,y,B,d){return a(),p("div",null,o)}const h=s(l,[["render",r]]);export{b as __pageData,h as default};
