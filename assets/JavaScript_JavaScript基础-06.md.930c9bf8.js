import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8218e65d.js";const p="/assets/图片3.e1ecf5a7.png",o="/assets/图片4.93fd0ad5.png",e="/assets/图片15.64cbcfa6.png",h=JSON.parse('{"title":"JavaScript 基础-06","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/JavaScript基础-06.md","filePath":"JavaScript/JavaScript基础-06.md","lastUpdated":1699082320000}'),r={name:"JavaScript/JavaScript基础-06.md"},t=l(`<h1 id="javascript-基础-06" tabindex="-1">JavaScript 基础-06 <a class="header-anchor" href="#javascript-基础-06" aria-label="Permalink to &quot;JavaScript 基础-06&quot;">​</a></h1><h2 id="_1-内置对象" tabindex="-1">1 - 内置对象 <a class="header-anchor" href="#_1-内置对象" aria-label="Permalink to &quot;1 - 内置对象&quot;">​</a></h2><h3 id="_1-1-内置对象" tabindex="-1">1.1 内置对象 <a class="header-anchor" href="#_1-1-内置对象" aria-label="Permalink to &quot;1.1 内置对象&quot;">​</a></h3><p>​ JavaScript 中的对象分为 3 种：<strong>自定义对象 、内置对象、 浏览器对象</strong> ​ 前面两种对象是 JS 基础 内容，属于 ECMAScript； 第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p><p>​ JavaScript 提供了多个内置对象：Math、 Date 、Array、String 等</p><h3 id="_1-2-查文档" tabindex="-1">1.2 查文档 <a class="header-anchor" href="#_1-2-查文档" aria-label="Permalink to &quot;1.2 查文档&quot;">​</a></h3><p>​ 查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过 MDN/W3C 来查询。 ​ Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。 ​ MDN:<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/</a></p><h3 id="_1-3-math-对象" tabindex="-1">1.3 Math 对象 <a class="header-anchor" href="#_1-3-math-对象" aria-label="Permalink to &quot;1.3 Math 对象&quot;">​</a></h3><p>​ Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整 注意 -3.5 结果是 -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><p>​ 注意：上面的方法使用时必须带括号</p><p>​ <strong>获取指定范围内的随机整数</strong>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getRandom</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">min</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">max</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">max</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">min</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">min</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-4-日期对象" tabindex="-1">1.4 日期对象 <a class="header-anchor" href="#_1-4-日期对象" aria-label="Permalink to &quot;1.4 日期对象&quot;">​</a></h3><p>​ Date 对象和 Math 对象不一样，Date 是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><ul><li><p>使用 Date 实例化日期对象</p><ul><li>获取当前时间必须实例化：</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Date</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>获取指定时间的日期对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">future</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Date</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;2019/5/1&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p></li><li><p>使用 Date 实例的方法和属性</p><p>(./images/06/图片1.png)</p></li><li><p>通过 Date 实例获取总毫米数</p><ul><li><p>总毫秒数的含义</p><p>​ 基于 1970 年 1 月 1 日（世界标准时间）起的毫秒数</p></li><li><p>获取总毫秒数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 实例化Date对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Date</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 用于获取对象的原始值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2. 简单写可以这么做</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Date</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3. HTML5中提供的方法，有兼容性问题</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li></ul><h3 id="_1-5-数组对象" tabindex="-1">1.5 数组对象 <a class="header-anchor" href="#_1-5-数组对象" aria-label="Permalink to &quot;1.5 数组对象&quot;">​</a></h3><h4 id="创建数组的两种方式" tabindex="-1">创建数组的两种方式 <a class="header-anchor" href="#创建数组的两种方式" aria-label="Permalink to &quot;创建数组的两种方式&quot;">​</a></h4><ul><li><p>字面量方式</p><ul><li><p>示例代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>new Array()</p><ul><li><p>示例代码如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">var arr = new Array();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 注意：上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数 Array 创建非空数组，可以在创建数组时传入参数</p><p>​ 参数传递规则如下：</p><ul><li><p>如果只传入一个参数，则参数规定了数组的长度</p></li><li><p>如果传入了多个参数，则参数称为数组的元素</p></li></ul></li></ul></li></ul><h4 id="检测是否为数组" tabindex="-1">检测是否为数组 <a class="header-anchor" href="#检测是否为数组" aria-label="Permalink to &quot;检测是否为数组&quot;">​</a></h4><ul><li><p>instanceof 运算符</p><ul><li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul></li><li><p>Array.isArray()</p><ul><li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul></li></ul><h4 id="添加删除数组元素的方法" tabindex="-1">添加删除数组元素的方法 <a class="header-anchor" href="#添加删除数组元素的方法" aria-label="Permalink to &quot;添加删除数组元素的方法&quot;">​</a></h4><ul><li><p>数组中有进行增加、删除元素的方法，部分方法如下表</p><p>(./images/06/图片2.png)</p><p>注意：push、unshift 为增加元素方法；pop、shift 为删除元素的方法</p></li></ul><h4 id="数组排序" tabindex="-1">数组排序 <a class="header-anchor" href="#数组排序" aria-label="Permalink to &quot;数组排序&quot;">​</a></h4><ul><li><p>数组中有对数组本身排序的方法，部分方法如下表</p><p><img src="`+p+'" alt=""></p><p>注意：sort 方法需要传入参数来设置升序、降序排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></li></ul><h4 id="数组索引方法" tabindex="-1">数组索引方法 <a class="header-anchor" href="#数组索引方法" aria-label="Permalink to &quot;数组索引方法&quot;">​</a></h4><ul><li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="'+o+`" alt=""></p></li></ul><h4 id="数组转换为字符串" tabindex="-1">数组转换为字符串 <a class="header-anchor" href="#数组转换为字符串" aria-label="Permalink to &quot;数组转换为字符串&quot;">​</a></h4><ul><li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p>(./images/06/图片5.png)</p><p>注意：join 方法如果不传入参数，则按照 “ , ”拼接元素</p></li></ul><h4 id="其他方法" tabindex="-1">其他方法 <a class="header-anchor" href="#其他方法" aria-label="Permalink to &quot;其他方法&quot;">​</a></h4><ul><li><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p><p>(./images/06/图片6.png)</p></li></ul><h3 id="_1-6-字符串对象" tabindex="-1">1.6 字符串对象 <a class="header-anchor" href="#_1-6-字符串对象" aria-label="Permalink to &quot;1.6 字符串对象&quot;">​</a></h3><h4 id="基本包装类型" tabindex="-1">基本包装类型 <a class="header-anchor" href="#基本包装类型" aria-label="Permalink to &quot;基本包装类型&quot;">​</a></h4><p>​ 为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number 和 Boolean。</p><p>​ 基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 下面代码有什么问题？</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;andy&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ 按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>​ js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">temp</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;andy&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2. 赋值给我们声明的字符变量</span></span>
<span class="line"><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">temp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3. 销毁临时变量</span></span>
<span class="line"><span style="color:#E06C75;">temp</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="字符串的不可变" tabindex="-1">字符串的不可变 <a class="header-anchor" href="#字符串的不可变" aria-label="Permalink to &quot;字符串的不可变&quot;">​</a></h4><p>​ 指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>​ 当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。 ​ 由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p><h4 id="根据字符返回位置" tabindex="-1">根据字符返回位置 <a class="header-anchor" href="#根据字符返回位置" aria-label="Permalink to &quot;根据字符返回位置&quot;">​</a></h4><p>​ 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p>(./images/06/图片7.png)</p><p>​ 案例：查找字符串&quot;abcoefoxyozzopp&quot;中所有 o 出现的位置以及次数</p><ol><li>先查找第一个 o 出现的位置</li><li>然后 只要 indexOf 返回的结果不是 -1 就继续往后查找</li><li>因为 indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加 1，从而继续查找</li></ol><h4 id="根据位置返回字符" tabindex="-1">根据位置返回字符 <a class="header-anchor" href="#根据位置返回字符" aria-label="Permalink to &quot;根据位置返回字符&quot;">​</a></h4><p>​ 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p>(./images/06/图片8.png)</p><p>​ 在上述方法中，charCodeAt 方法返回的是指定位置上字符对应的 ASCII 码，ASCII 码对照表如下：</p><p>(./images/06/图片9.png)</p><p>​ 案例：判断一个字符串 &#39;abcoefoxyozzopp&#39; 中出现次数最多的字符，并统计其次数</p><ol><li><p>核心算法：利用 charAt(） 遍历这个字符串</p></li><li><p>把每个字符都存储给对象， 如果对象没有该属性，就为 1，如果存在了就 +1</p></li><li><p>遍历对象，得到最大值和该字符</p><p>​ 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p></li></ol><h4 id="字符串操作方法" tabindex="-1">字符串操作方法 <a class="header-anchor" href="#字符串操作方法" aria-label="Permalink to &quot;字符串操作方法&quot;">​</a></h4><p>​ 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p>(./images/06/图片10.png)</p><h4 id="replace-方法" tabindex="-1">replace()方法 <a class="header-anchor" href="#replace-方法" aria-label="Permalink to &quot;replace()方法&quot;">​</a></h4><p>​ replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">字符串.replace(被替换的字符串， 要替换为的字符串)；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="split-方法" tabindex="-1">split()方法 <a class="header-anchor" href="#split-方法" aria-label="Permalink to &quot;split()方法&quot;">​</a></h4><p>​ split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>​ 其使用格式如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">字符串.split(&quot;分割字符&quot;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2-简单数据类型和复杂数据类型" tabindex="-1">2 - 简单数据类型和复杂数据类型 <a class="header-anchor" href="#_2-简单数据类型和复杂数据类型" aria-label="Permalink to &quot;2 - 简单数据类型和复杂数据类型&quot;">​</a></h2><h3 id="_2-1-简单数据类型" tabindex="-1">2.1 简单数据类型 <a class="header-anchor" href="#_2-1-简单数据类型" aria-label="Permalink to &quot;2.1 简单数据类型&quot;">​</a></h3><p>​ <strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括 string ，number，boolean，undefined，null</p><h3 id="_2-2-复杂数据类型" tabindex="-1">2.2 复杂数据类型 <a class="header-anchor" href="#_2-2-复杂数据类型" aria-label="Permalink to &quot;2.2 复杂数据类型&quot;">​</a></h3><p>​ <strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date 等；</p><h3 id="_2-3-堆栈" tabindex="-1">2.3 堆栈 <a class="header-anchor" href="#_2-3-堆栈" aria-label="Permalink to &quot;2.3 堆栈&quot;">​</a></h3><ul><li>堆栈空间分配区别：</li></ul><p>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p>简单数据类型存放到栈里面</p><p>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p>(./images/06/图片11.png)</p><ul><li><p>简单数据类型的存储方式</p><p>​ 值类型变量的数据直接存放在变量（栈空间）中</p></li></ul><p>(./images/06/图片12.png)</p><ul><li><p>复杂数据类型的存储方式</p><p>​ 引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p>(./images/06/图片13.png)</p></li></ul><h3 id="_2-4-简单类型传参" tabindex="-1">2.4 简单类型传参 <a class="header-anchor" href="#_2-4-简单类型传参" aria-label="Permalink to &quot;2.4 简单类型传参&quot;">​</a></h3><p>​ 函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">)；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>​ 运行结果如下：</p><p>(./images/06/图片14.png)</p><h3 id="_2-5-复杂数据类型传参" tabindex="-1">2.5 复杂数据类型传参 <a class="header-anchor" href="#_2-5-复杂数据类型传参" aria-label="Permalink to &quot;2.5 复杂数据类型传参&quot;">​</a></h3><p>​ 函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><div class="language-JavaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// x = p</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2. 这个输出什么 ?</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;张学友&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 3. 这个输出什么 ?</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;刘德华&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 1. 这个输出什么 ?</span></span>
<span class="line"><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 4. 这个输出什么 ?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>​ 运行结果如下：</p><p><img src="`+e+'" alt=""></p>',88),c=[t];function B(i,y,d,u,F,b){return a(),n("div",null,c)}const m=s(r,[["render",B]]);export{h as __pageData,m as default};
