import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7518ccd6.js";const A=JSON.parse('{"title":"Vue Router 4","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/vuerouter4.md","filePath":"Vue/vuerouter4.md","lastUpdated":1722246553000}'),p={name:"Vue/vuerouter4.md"},o=l(`<h1 id="vue-router-4" tabindex="-1">Vue Router 4 <a class="header-anchor" href="#vue-router-4" aria-label="Permalink to &quot;Vue Router 4&quot;">​</a></h1><p>vue3x 发布的同时，<code>Vue Router</code> 也升级成为了 4x 版本。</p><p>虽然进行了大更新，但是大部分的 <code>API</code> 没有变化</p><p>4x 使用了函数式编程的方式，从而更好的结合 <code>Composition API</code></p><h2 id="创建-router-实例" tabindex="-1">创建 router 实例 <a class="header-anchor" href="#创建-router-实例" aria-label="Permalink to &quot;创建 router 实例&quot;">​</a></h2><blockquote><p>hash 模式使用 <code>createWebHashHistory()</code> 方法</p><p>history 模式使用 <code>createWebHistory()</code>方法</p><p>之前 component 引入组件的时候，后边可以省略 .vue 后缀，但在 vue-router 4 这不能省略后缀，否则就报错了</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// router.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createWebHashHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Login&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;../components/login.vue&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/reg&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Reg&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;../components/reg.vue&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在 main.js 注册路由</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./App.vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./router&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 引入router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 使用router</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#app&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="路由组件" tabindex="-1">路由组件 <a class="header-anchor" href="#路由组件" aria-label="Permalink to &quot;路由组件&quot;">​</a></h2><p>4x 路由组件并没有什么变化，还是与之前的使用方法一致 在模版中也可以直接进行使用</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">&gt;去登录&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/reg&quot;</span><span style="color:#ABB2BF;">&gt;去注册&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ name: &#39;/&#39;, params: { userId: 123 }}&quot;</span><span style="color:#ABB2BF;">&gt;去登录&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ name: &#39;reg&#39; }&quot;</span><span style="color:#ABB2BF;">&gt;去注册&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">hr</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  {{ $router }} {{ $route }}</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="router-api-编程式导航" tabindex="-1"><code>Router API</code> 编程式导航 <a class="header-anchor" href="#router-api-编程式导航" aria-label="Permalink to &quot;\`Router API\` 编程式导航&quot;">​</a></h2><p>router4x 大部分的 API 并没有变化和以前一样</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 字符串路径</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/users/eduardo&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 带有路径的对象</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users/eduardo&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 命名的路由，并加上参数，让路由建立 url</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;eduardo&#39;</span><span style="color:#ABB2BF;"> } });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 带查询参数，结果是 /register?plan=private</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/register&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">plan</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;private&#39;</span><span style="color:#ABB2BF;"> } });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 带 hash，结果是 /about#team</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hash</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#team&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;eduardo&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 我们可以手动建立 url，但我们必须自己处理编码</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`/user/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">username</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 同样</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`/user/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">username</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果可能的话，使用 \`name\` 和 \`params\` 从自动 URL 编码中获益</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> } }); </span><span style="color:#7F848E;font-style:italic;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \`params\` 不能与 \`path\` 一起使用</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> } }); </span><span style="color:#7F848E;font-style:italic;">// -&gt; /user</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="vue-router-4-的变化" tabindex="-1"><code>Vue Router 4</code> 的变化 <a class="header-anchor" href="#vue-router-4-的变化" aria-label="Permalink to &quot;\`Vue Router 4\` 的变化&quot;">​</a></h2><h2 id="vue-rouer-与-setup" tabindex="-1"><code>Vue Rouer</code> 与 <code>setup</code> <a class="header-anchor" href="#vue-rouer-与-setup" aria-label="Permalink to &quot;\`Vue Rouer\` 与 \`setup\`&quot;">​</a></h2><p>vue3 的 setup 中并不能访问 this，所有推出了一些 <code>hook</code> 函数， 使用这些函数就可以获取到 <code>router</code>、<code>route</code> 的实例, 下面说说两个最常用的 <code>hook</code> 函数<code>useRouter()</code>、<code>useRoute()</code></p><h3 id="userouter" tabindex="-1"><code>useRouter()</code> <a class="header-anchor" href="#userouter" aria-label="Permalink to &quot;\`useRouter()\`&quot;">​</a></h3><p>vue2 在组件中访问全局路由实例都是 <code>this.$router</code>，而在 vue3 你需要使用 <code>useRouter()</code> 访问全局路由实例</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRouter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useRouter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方式一：字符串形式 path</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方式二：对象形式 path</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="useroute" tabindex="-1"><code>useRoute()</code> <a class="header-anchor" href="#useroute" aria-label="Permalink to &quot;\`useRoute()\`&quot;">​</a></h3><p>显而易见 <code>this.$route</code> 转换到 vue3 就是 <code>useRoute()</code> 获取当前的路由对象</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRoute</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useRoute</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 逻辑代码</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="其他-hook-函数" tabindex="-1">其他 <code>hook</code> 函数 <a class="header-anchor" href="#其他-hook-函数" aria-label="Permalink to &quot;其他 \`hook\` 函数&quot;">​</a></h3><blockquote><p><code>onBeforeRouteLeave</code> --在当前位置的组件将要离开时触发</p><p><code>onBeforeRouteUpdate</code> -- 在当前位置即将更新时触发</p></blockquote><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;{{ userData }}&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">setup</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">onBeforeRouteLeave</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onBeforeRouteUpdate</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">userData</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetchUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">onBeforeRouteLeave</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">answer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">confirm</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;you have unsaved changes!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">answer</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">onBeforeRouteUpdate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">userData</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetchUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>了解更多可以去官网查看。<a href="https://router.vuejs.org/zh/api/#Functions" target="_blank" rel="noreferrer"><strong>点击前往=&gt;</strong></a></p><h2 id="vue-router-4-的变化-1" tabindex="-1">Vue Router 4 的变化 <a class="header-anchor" href="#vue-router-4-的变化-1" aria-label="Permalink to &quot;Vue Router 4 的变化&quot;">​</a></h2><h3 id="history-替代了-mode" tabindex="-1">history 替代了 mode <a class="header-anchor" href="#history-替代了-mode" aria-label="Permalink to &quot;history 替代了 mode&quot;">​</a></h3><p>这样可以更好的创建路由实例，并自定义这个实例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./components/Home.Vue&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="createwebhistory-base" tabindex="-1">createWebHistory(base) <a class="header-anchor" href="#createwebhistory-base" aria-label="Permalink to &quot;createWebHistory(base)&quot;">​</a></h4><p>创建一个 HTML5 历史，即单页面应用程序中最常见的历史记录</p><p>base 为可选参数，当应用程序被托管在非站点根目录文件夹中，诸如 <code>https://example.com/folder/</code> 之类时非常有用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 没有 base，应用托管在域名 https://example.com 的根目录下。</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给出的网址为 https://example.com/folder/\`</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/folder/&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="createwebhashhistory-base" tabindex="-1">createWebHashHistory(base) <a class="header-anchor" href="#createwebhashhistory-base" aria-label="Permalink to &quot;createWebHashHistory(base)&quot;">​</a></h4><p>创建一个 hash 历史记录。</p><p>对于没有主机的 web 应用程序 (例如 <code>file://</code>)，或当配置服务器不能处理任意 URL 时这非常有用</p><p><strong>注意：如果 SEO 对你很重要，你应该使用 createWebHistory</strong></p><p>提供一个可选的 base，默认是 <code>location.pathname + location.search</code>。如果 <code>head</code> 中有一个 <code>&lt;base&gt;</code>，它的值将被忽略，而采用这个参数。<strong>但请注意它会影响所有的 history.pushState() 调用</strong>，这意味着如果你使用一个 <code>&lt;base&gt;</code> 标签，它的 <code>href</code> 值<strong>必须与这个参数相匹配</strong> (请忽略 <code>#</code> 后面的所有内容)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// at https://example.com/folder</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给出的网址为 https://example.com/folder#</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/folder/&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给出的网址为 https://example.com/folder/#</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果在 base 中提供了 \`#\`，则它不会被 createWebHashHistory 添加</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/folder/#/app/&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给出的网址为 https://example.com/folder/#/app/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 你应该避免这样做，因为它会更改原始 url 并打断正在复制的 url</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/other-folder/&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给出的网址为 https://example.com/other-folder/#</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// at file:///usr/etc/folder/index.html</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对于没有 \`host\` 的位置，base被忽略</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给出的网址为 file:///usr/etc/folder/index.html#</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/iAmIgnored&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="creatememoryhistory-base" tabindex="-1">createMemoryHistory(base) <a class="header-anchor" href="#creatememoryhistory-base" aria-label="Permalink to &quot;createMemoryHistory(base)&quot;">​</a></h4><p>创建一个基于内存的历史记录。这个历史记录的主要目的是处理 SSR。它在一个特殊的位置开始，这个位置无处不在。如果用户不在浏览器上下文中，它们可以通过调用 <code>router.push()</code> 或 <code>router.replace()</code> 将该位置替换为启动位置。</p><p>Base 适用于所有 URL，默认为&#39;/&#39;</p><h3 id="通配符-被移除" tabindex="-1">通配符*被移除 <a class="header-anchor" href="#通配符-被移除" aria-label="Permalink to &quot;通配符\\*被移除&quot;">​</a></h3><p>现在必须使用自定义的 regex 参数来定义所有路由(<code>*</code>、<code>/*</code>)：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// pathMatch 是参数的名称，例如，跳转到 /not/found 会得到</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// { params: { params: { pathMatch: [&#39;not&#39;, &#39;found&#39;] }}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 这要归功于最后一个 *，意思是重复的参数，如果你</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 打算直接使用未匹配的路径名称导航到该路径，这是必要的</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/:pathMatch(.*)*&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;not-found&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">NotFound</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 如果你省略了最后的 \`*\`，在解析或跳转时，参数中的 \`/\` 字符将被编码</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/:pathMatch(.*)&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bad-not-found&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">NotFound</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果使用命名路由，不好的例子：</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bad-not-found&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">pathMatch</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;not/found&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;/not%2Ffound&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 好的例子:</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;not-found&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">pathMatch</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;not&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;found&#39;</span><span style="color:#ABB2BF;">] },</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;/not/found&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="isready-替代-onready" tabindex="-1">isReady() 替代 onReady() <a class="header-anchor" href="#isready-替代-onready" aria-label="Permalink to &quot;isReady() 替代 onReady()&quot;">​</a></h3><p><strong>这个方法用于底层的服务端渲染</strong></p><p>当路由器完成初始化导航时，返回一个 Promise，这意味着它已经解析了所有与初始路由相关的异步输入钩子和异步组件。</p><p>如果初始导航已经发生了，那么 promise 就会立即解析。</p><p>这在服务器端渲染中很有用，可以确保服务器和客户端的输出一致。</p><p>需要注意的是，在服务器端，你需要手动推送初始位置，而在客户端，路由器会自动从 URL 中获取初始位置。</p><p>当路由器完成初始化导航时，返回一个 Promise，这意味着它已经解析了所有与初始路由相关的异步输入钩子和异步组件。</p><p>如果初始导航已经发生了，那么 promise 就会立即解析。</p><p>这在服务器端渲染中很有用，可以确保服务器和客户端的输出一致。</p><p>需要注意的是，在服务器端，你需要手动推送初始位置，而在客户端，路由器会自动从 URL 中获取初始位置。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onReady</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onSuccess</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onError</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换成</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onSuccess</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onError</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或者使用 await:</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReady</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 成功</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="scrollbehavior" tabindex="-1">scrollBehavior <a class="header-anchor" href="#scrollbehavior" aria-label="Permalink to &quot;scrollBehavior&quot;">​</a></h3><p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p><p>当创建一个 Router 实例，你可以提供一个 <code>scrollBehavior</code> 方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [...],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">scrollBehavior</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// return 期望滚动到哪个的位置</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>例子：</p><p>返回 <code>savedPosition</code>，在按下 后退/前进 按钮时，就会像浏览器的原生表现那样滚到之前的位置，而不是跳到页面顶部</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">scrollBehavior</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">top</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="router-view-的-v-slot" tabindex="-1"><code>&lt;router-view&gt;</code> 的 <code>&lt;v-slot&gt;</code> <a class="header-anchor" href="#router-view-的-v-slot" aria-label="Permalink to &quot;\`&lt;router-view&gt;\` 的 \`&lt;v-slot&gt;\`&quot;">​</a></h3><p>现在 keep-alive 和 transition 必须用在 router-view 内部</p><p><code>&lt;router-view&gt;</code> 暴露了一个 <code>v-slot</code> API，主要使用 <code>&lt;transition&gt;</code> 和 <code>&lt;keep-alive&gt;</code> 组件来包裹你的路由组件</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 以前的写法  --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 现在的写法 --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 通过v-slot获取内部的组件和路由 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-slot</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ Component, route }&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 路由的meta内属性绑定过度行为 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;route.meta.transition || &#39;fade&#39;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">mode</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;out-in&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 通过:is动态渲染组件到keep-alive内部 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:is</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Component&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;route.meta.usePathKey ? route.path : undefined&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="router-link-移除的属性" tabindex="-1">router-link 移除的属性 <a class="header-anchor" href="#router-link-移除的属性" aria-label="Permalink to &quot;router-link 移除的属性&quot;">​</a></h3><h4 id="append" tabindex="-1">append <a class="header-anchor" href="#append" aria-label="Permalink to &quot;append&quot;">​</a></h4><p>移除 append —— 可以手动将值设置到现有的 <code>path</code> 中</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">将</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;child-route&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">append</span><span style="color:#ABB2BF;">&gt;to relative child&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">替换成</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;child-route&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  to relative child</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>你必须在 <em>App</em> 实例上定义一个全局的 <code>append</code> 函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">globalProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pathToAppend</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">endsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">pathToAppend</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="tag-event" tabindex="-1">tag/event <a class="header-anchor" href="#tag-event" aria-label="Permalink to &quot;tag/event&quot;">​</a></h4><p>tag 属性是定义 router-link 渲染结果的标签，由于不再是 a 标签，点击没了跳转，所以需要事件触发</p><p>现在<code>&lt;router-link&gt;</code> 中的 <code>event</code> 和 <code>tag</code> 属性都已被删除。可以使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fnext.router.vuejs.org%2Fzh%2Fapi%2F%23router-link-s-v-slot" title="https://next.router.vuejs.org/zh/api/#router-link-s-v-slot" target="_blank" rel="noreferrer"><code>v-slot</code> API</a> 来完全定制 <code>&lt;router-link&gt;</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">将</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">tag</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;span&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">event</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;dblclick&quot;</span><span style="color:#ABB2BF;">&gt;About Us&lt;/</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E06C75;">替换成</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">custom</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">v-slot</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;{ navigate }&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">@click=&quot;navigate&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">@keypress.enter=&quot;navigate&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">role</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;link&quot;</span><span style="color:#ABB2BF;">&gt;About Us&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="exact" tabindex="-1">exact <a class="header-anchor" href="#exact" aria-label="Permalink to &quot;exact&quot;">​</a></h4><p>现在完全匹配逻辑简化，特殊的业务逻辑由用户自己解决，如想自定义这种行为，例如考虑到 <code>hash</code> 部分，应该使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fnext.router.vuejs.org%2Fapi%2F%23router-link-s-v-slot" title="https://next.router.vuejs.org/api/#router-link-s-v-slot" target="_blank" rel="noreferrer"><code>v-slot</code> API</a> 来扩展<code>&lt;router-link&gt;</code>。</p><h3 id="mixins-中的路由守卫将被忽略" tabindex="-1">mixins 中的路由守卫将被忽略 <a class="header-anchor" href="#mixins-中的路由守卫将被忽略" aria-label="Permalink to &quot;mixins 中的路由守卫将被忽略&quot;">​</a></h3><h3 id="resolve-替代-match" tabindex="-1">resolve 替代 match <a class="header-anchor" href="#resolve-替代-match" aria-label="Permalink to &quot;resolve 替代 match&quot;">​</a></h3><p><code>router.match</code> 和 <code>router.resolve</code> 已合并到 <code>router.resolve</code> 中，签名略有不同</p><p><strong>原因</strong>：将用于同一目的的多种方法统一起来。</p><p>router.resolve()返回<a href="https://link.juejin.cn?target=https%3A%2F%2Fnext.router.vuejs.org%2Fzh%2Fapi%2F%23routelocationraw" title="https://next.router.vuejs.org/zh/api/#routelocationraw" target="_blank" rel="noreferrer">路由地址</a>的<a href="https://link.juejin.cn?target=https%3A%2F%2Fnext.router.vuejs.org%2Fzh%2Fapi%2F%23routelocation" title="https://next.router.vuejs.org/zh/api/#routelocation" target="_blank" rel="noreferrer">标准化版本</a>。还包括一个包含任何现有 <code>base</code> 的 <code>href</code> 属性。</p><h3 id="移除-router-getmatchedcomponents" tabindex="-1">移除 router.getMatchedComponents() <a class="header-anchor" href="#移除-router-getmatchedcomponents" aria-label="Permalink to &quot;移除 router.getMatchedComponents()&quot;">​</a></h3><p>这个方法现在被删除了，因为匹配的组件可以从 <code>router.currentRoute.value.mixed</code> 中获取：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">currentRoute</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flatMap</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">record</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">record</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">components</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>原因</strong>：这个方法只在 SSR 中使用，并且是用户一行就能完成的操作。</p><h3 id="包括首屏导航在内的所有导航均为异步" tabindex="-1">包括首屏导航在内的所有导航均为异步 <a class="header-anchor" href="#包括首屏导航在内的所有导航均为异步" aria-label="Permalink to &quot;包括首屏导航在内的所有导航均为异步&quot;">​</a></h3><p>所有的导航，包括第一个导航，现在都是异步的，这意味着，如果使用一个 <code>transition</code>，可能需要等待路由 <em>ready</em> 好后再挂载程序：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#app&#39;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>如果首屏存在路由守卫，则可以不等待就绪直接挂载，产生结果将和 vue2 相同</p></blockquote><h3 id="移除-route-的-parent-属性" tabindex="-1">移除 route 的 parent 属性 <a class="header-anchor" href="#移除-route-的-parent-属性" aria-label="Permalink to &quot;移除 route 的 parent 属性&quot;">​</a></h3><p><code>parent</code> 属性已从标准化路由地址（<code>this.$route</code> 和 <code>router.resolve</code> 返回的对象）中删除。你仍然可以通过 <code>matched</code> 数组访问它：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">matched</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">matched</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>原因</strong>：同时存在 <code>parent</code> 和 <code>children</code> 会造成不必要的循环引用，而属性可以通过 <code>matched</code> 来检索</p><h3 id="history-state-的用法" tabindex="-1">history.state 的用法 <a class="header-anchor" href="#history-state-的用法" aria-label="Permalink to &quot;history.state 的用法&quot;">​</a></h3><p>Vue Router 将信息保存在 <code>history.state</code> 上。如果你有任何手动调用 <code>history.pushState()</code> 的代码，你应该避免它，或者用的 <code>router.push()</code> 和 <code>history.replaceState()</code> 进行重构：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myState</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换成</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">({ ...</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">myState</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同样，如果你在调用 <code>history.replaceState()</code> 时没有保留当前状态，你需要传递当前 <code>history.state</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">({}, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换成</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="options-中需要配置-routes" tabindex="-1">options 中需要配置 routes <a class="header-anchor" href="#options-中需要配置-routes" aria-label="Permalink to &quot;options 中需要配置 routes&quot;">​</a></h3><p><strong>原因</strong>：路由的设计是为了创建路由，尽管你可以在以后添加它们。在大多数情况下，你至少需要一条路由，一般每个应用都会编写一次。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [] });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="一些错误处理的变更" tabindex="-1">一些错误处理的变更 <a class="header-anchor" href="#一些错误处理的变更" aria-label="Permalink to &quot;一些错误处理的变更&quot;">​</a></h3><h4 id="跳转不存在的命名路由会报错" tabindex="-1">跳转不存在的命名路由会报错 <a class="header-anchor" href="#跳转不存在的命名路由会报错" aria-label="Permalink to &quot;跳转不存在的命名路由会报错&quot;">​</a></h4><p><code>router.push({ name: homee})</code></p><p><strong>原因</strong>：以前，路由会导航到 <code>/</code>，但不显示任何内容（而不是主页）。抛出一个错误更有意义，因为我们不能生成一个有效的 URL 进行导航</p><h4 id="缺少必填参数会抛出异常" tabindex="-1">缺少必填参数会抛出异常 <a class="header-anchor" href="#缺少必填参数会抛出异常" aria-label="Permalink to &quot;缺少必填参数会抛出异常&quot;">​</a></h4><p>在没有传递所需参数的情况下跳转或解析命名路由，会产生错误：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 给与以下路由:</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users/:id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UserDetails</span><span style="color:#ABB2BF;"> }];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 缺少 \`id\` 参数会失败</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="命名子路由如果-path-为空的时候不在追加" tabindex="-1">命名子路由如果 path 为空的时候不在追加 / <a class="header-anchor" href="#命名子路由如果-path-为空的时候不在追加" aria-label="Permalink to &quot;命名子路由如果 path 为空的时候不在追加 /&quot;">​</a></h4><p>给予任何空 <code>path</code> 的嵌套命名路由：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/dashboard&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;dashboard-parent&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">DashboardParent</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;dashboard&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">DashboardDefault</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;settings&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;dashboard-settings&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">DashboardSettings</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>现在，导航或解析到命名的路由 <code>dashboard</code> 时，会产生一个<strong>不带斜线的 URL</strong>：</p><p><code>router.resolve({ name: &#39;dashboard&#39; }).href // &#39;/dashboard&#39;</code></p><p>这对子级 <code>redirect</code> 有重要的副作用，如下所示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/parent&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Parent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 现在将重定向到 \`/home\` 而不是 \`/parent/home\`</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">redirect</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Home</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>请注意，如果 <code>path</code> 是 <code>/parent/</code>，这也可以，因为 <code>home</code> 到 <code>/parent/</code> 的相对地址确实是 <code>/parent/home</code>，但 <code>home</code> 到 <code>/parent</code> 的相对地址是 <code>/home</code>。</p><p><strong>原因</strong>：这是为了使尾部的斜线行为保持一致：默认情况下，所有路由都允许使用尾部的斜线。可以通过使用 <code>strict</code> 配置和手动添加(或不添加)斜线来禁用它。</p><h3 id="route-属性编码" tabindex="-1">$route 属性编码 <a class="header-anchor" href="#route-属性编码" aria-label="Permalink to &quot;$route 属性编码&quot;">​</a></h3><p>无论在哪里启动导航，<code>params</code>、<code>query</code>和 <code>hash</code> 中的解码值现在都是一致的（旧的浏览器仍然会产生未编码的 <code>path</code> 和 <code>fullPath</code>）。初始导航应产生与应用内部导航相同的结果。</p><ul><li>Path/fullpath 不再做解码</li><li>hash 会被解码</li><li>push、resolve 和 replace，字符串参数，或者对象参数 path 属性必须编码</li><li>params / 会被解码</li><li>query 中 + 不处理，之前会处理为 %2b，如需处理可以使用 stringifyQuery()</li></ul>`,126),e=[o];function r(t,c,B,y,i,u){return n(),a("div",null,e)}const b=s(p,[["render",r]]);export{A as __pageData,b as default};
