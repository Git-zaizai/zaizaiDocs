import{_ as n,o as a,c as l,O as p}from"./chunks/framework.218070ce.js";const d=JSON.parse('{"title":"工程","description":"","frontmatter":{},"headers":[],"relativePath":"TypeScript/工程.md","filePath":"TypeScript/工程.md","lastUpdated":1743585365000}'),e={name:"TypeScript/工程.md"};function o(t,s,r,c,i,B){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="工程" tabindex="-1">工程 <a class="header-anchor" href="#工程" aria-label="Permalink to &quot;工程&quot;">​</a></h1><p>掌握了 TypeScript 的语法就像学会了砌墙的工艺。</p><p>我们学习 TypeScript 的目的不是为了造一间小茅屋，而是为了造高楼大厦，这也正是 TypeScript 的类型系统带来的优势。</p><p>那么一项大工程应该如何开展呢？本部分的内容就会介绍 TypeScript 工程化的最佳实践，具体内容包括：</p><ul><li><a href="#代码检查">代码检查</a></li><li><a href="#编译选项">编译选项</a></li></ul><h1 id="代码检查" tabindex="-1">代码检查 <a class="header-anchor" href="#代码检查" aria-label="Permalink to &quot;代码检查&quot;">​</a></h1><p>2019 年 1 月，<a href="https://www.oschina.net/news/103818/future-typescript-eslint" target="_blank" rel="noreferrer">TypeScirpt 官方决定全面采用 ESLint</a> 作为代码检查的工具，并创建了一个新项目 <a href="https://github.com/typescript-eslint/typescript-eslint" target="_blank" rel="noreferrer">typescript-eslint</a>，提供了 TypeScript 文件的解析器 <a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/parser" target="_blank" rel="noreferrer">@typescript-eslint/parser</a> 和相关的配置选项 <a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin" target="_blank" rel="noreferrer">@typescript-eslint/eslint-plugin</a> 等。而之前的两个 lint 解决方案都将弃用：</p><ul><li><a href="https://github.com/eslint/typescript-eslint-parser" target="_blank" rel="noreferrer">typescript-eslint-parser</a> 已停止维护</li><li><a href="https://palantir.github.io/tslint/" target="_blank" rel="noreferrer">TSLint</a> 将提供迁移工具，并在 typescript-eslint 的功能足够完整后停止维护 TSLint（Once we consider ESLint feature-complete w.r.t. TSLint, we will deprecate TSLint and help users migrate to ESLint<sup><a href="https://medium.com/palantir/tslint-in-2019-1a144c2317a9" target="_blank" rel="noreferrer">1</a></sup>）</li></ul><p>综上所述，目前以及将来的 TypeScript 的代码检查方案就是 <a href="https://github.com/typescript-eslint/typescript-eslint" target="_blank" rel="noreferrer">typescript-eslint</a>。</p><h2 id="什么是代码检查" tabindex="-1">什么是代码检查 <a class="header-anchor" href="#什么是代码检查" aria-label="Permalink to &quot;什么是代码检查&quot;">​</a></h2><p>代码检查主要是用来发现代码错误、统一代码风格。</p><p>在 JavaScript 项目中，我们一般使用 <a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a> 来进行代码检查，它通过插件化的特性极大的丰富了适用范围，搭配 <a href="https://github.com/typescript-eslint/typescript-eslint" target="_blank" rel="noreferrer">typescript-eslint</a> 之后，甚至可以用来检查 TypeScript 代码。</p><h2 id="为什么需要代码检查" tabindex="-1">为什么需要代码检查 <a class="header-anchor" href="#为什么需要代码检查" aria-label="Permalink to &quot;为什么需要代码检查&quot;">​</a></h2><p>有人会觉得，JavaScript 非常灵活，所以需要代码检查。而 TypeScript 已经能够在编译阶段检查出很多问题了，为什么还需要代码检查呢？</p><p>因为 TypeScript 关注的重心是类型的检查，而不是代码风格。当团队的人员越来越多时，同样的逻辑不同的人写出来可能会有很大的区别：</p><ul><li>缩进应该是四个空格还是两个空格？</li><li>是否应该禁用 <code>var</code>？</li><li>接口名是否应该以 <code>I</code> 开头？</li><li>是否应该强制使用 <code>===</code> 而不是 <code>==</code>？</li></ul><p>这些问题 TypeScript 不会关注，但是却影响到多人协作开发时的效率、代码的可理解性以及可维护性。</p><p>下面来看一个具体的例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Tom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`My name is </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">myNane</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`My name is </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">myName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toStrng</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以上代码你能看出有什么错误吗？</p><p>分别用 tsc 编译和 eslint 检查后，报错信息如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Tom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// eslint 报错信息：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Unexpected var, use let or const instead.eslint(no-var)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`My name is </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">myNane</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// tsc 报错信息：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Cannot find name &#39;myNane&#39;. Did you mean &#39;myName&#39;?</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// eslint 报错信息：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &#39;myNane&#39; is not defined.eslint(no-undef)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`My name is </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">myName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toStrng</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// tsc 报错信息：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Property &#39;toStrng&#39; does not exist on type &#39;string&#39;. Did you mean &#39;toString&#39;?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><table><thead><tr><th>存在的问题</th><th><code>tsc</code> 是否报错</th><th><code>eslint</code> 是否报错</th></tr></thead><tbody><tr><td>应该使用 <code>let</code> 或 <code>const</code> 而不是 <code>var</code></td><td>❌</td><td>✅</td></tr><tr><td><code>myName</code> 被误写成了 <code>myNane</code></td><td>✅</td><td>✅</td></tr><tr><td><code>toString</code> 被误写成了 <code>toStrng</code></td><td>✅️</td><td>❌</td></tr></tbody></table><p>上例中，我们使用了 <code>var</code> 来定义一个变量，但其实 ES6 中有更先进的语法 <code>let</code> 和 <code>const</code>，此时就可以通过 <code>eslint</code> 检查出来，提示我们应该使用 <code>let</code> 或 <code>const</code> 而不是 <code>var</code>。</p><p>对于未定义的变量 <code>myNane</code>，<code>tsc</code> 和 <code>eslint</code> 都可以检查出来。</p><p>由于 <code>eslint</code> 无法识别 <code>myName</code> 存在哪些方法，所以对于拼写错误的 <code>toString</code> 没有检查出来。</p><p>由此可见，<code>eslint</code> 能够发现出一些 <code>tsc</code> 不会关心的错误，检查出一些潜在的问题，所以代码检查还是非常重要的。</p><h2 id="在-typescript-中使用-eslint" tabindex="-1">在 TypeScript 中使用 ESLint <a class="header-anchor" href="#在-typescript-中使用-eslint" aria-label="Permalink to &quot;在 TypeScript 中使用 ESLint&quot;">​</a></h2><h3 id="安装-eslint" tabindex="-1">安装 ESLint <a class="header-anchor" href="#安装-eslint" aria-label="Permalink to &quot;安装 ESLint&quot;">​</a></h3><p>ESLint 可以安装在当前项目中或全局环境下，因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。可以运行下面的脚本来安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-dev</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">eslint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>由于 ESLint 默认使用 <a href="https://github.com/eslint/espree" target="_blank" rel="noreferrer">Espree</a> 进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装 <a href="https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser" target="_blank" rel="noreferrer"><code>@typescript-eslint/parser</code></a>，替代掉默认的解析器，别忘了同时安装 <code>typescript</code>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-dev</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">typescript</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@typescript-eslint/parser</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来需要安装对应的插件 <a href="https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin" target="_blank" rel="noreferrer">@typescript-eslint/eslint-plugin</a> 它作为 eslint 默认规则的补充，提供了一些额外的适用于 ts 语法的规则。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-dev</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@typescript-eslint/eslint-plugin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="创建配置文件" tabindex="-1">创建配置文件 <a class="header-anchor" href="#创建配置文件" aria-label="Permalink to &quot;创建配置文件&quot;">​</a></h3><p>ESLint 需要一个配置文件来决定对哪些规则进行检查，配置文件的名称一般是 <code>.eslintrc.js</code> 或 <code>.eslintrc.json</code>。</p><p>当运行 ESLint 的时候检查一个文件的时候，它会首先尝试读取该文件的目录下的配置文件，然后再一级一级往上查找，将所找到的配置合并起来，作为当前被检查文件的配置。</p><p>我们在项目的根目录下创建一个 <code>.eslintrc.js</code>，内容如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">parser</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;@typescript-eslint/parser&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;@typescript-eslint&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">rules</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 禁止使用 var</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;no-var&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 优先使用 interface 而不是 type</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;@typescript-eslint/consistent-type-definitions&#39;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&quot;interface&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ]</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>以上配置中，我们指定了两个规则，其中 <code>no-var</code> 是 ESLint 原生的规则，<code>@typescript-eslint/consistent-type-definitions</code> 是 <code>@typescript-eslint/eslint-plugin</code> 新增的规则。</p><p>规则的取值一般是一个数组（上例中的 <code>@typescript-eslint/consistent-type-definitions</code>），其中第一项是 <code>off</code>、<code>warn</code> 或 <code>error</code> 中的一个，表示关闭、警告和报错。后面的项都是该规则的其他配置。</p><p>如果没有其他配置的话，则可以将规则的取值简写为数组中的第一项（上例中的 <code>no-var</code>）。</p><p>关闭、警告和报错的含义如下：</p><ul><li>关闭：禁用此规则</li><li>警告：代码检查时输出错误信息，但是不会影响到 exit code</li><li>报错：发现错误时，不仅会输出错误信息，而且 exit code 将被设为 1（一般 exit code 不为 0 则表示执行出现错误）</li></ul><h3 id="检查一个-ts-文件" tabindex="-1">检查一个 ts 文件 <a class="header-anchor" href="#检查一个-ts-文件" aria-label="Permalink to &quot;检查一个 ts 文件&quot;">​</a></h3><p>创建了配置文件之后，我们来创建一个 ts 文件看看是否能用 ESLint 去检查它。</p><p>创建一个新文件 <code>index.ts</code>，将以下内容复制进去：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Tom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后执行以下命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">./node_modules/.bin/eslint</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">index.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>则会得到如下报错信息：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">/path/to/index.ts</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">1:1</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">error</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">Unexpected</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">var,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">use</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">or</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">instead</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">no-var</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">3:6</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">error</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">Use</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">an</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">interface</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">instead</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span><span style="color:#56B6C2;">type</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">@typescript-eslint/consistent-type-definitions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">✖</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">problems</span><span style="color:#ABB2BF;"> (2 </span><span style="color:#98C379;">errors,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">warnings</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">errors</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">and</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">warnings</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">potentially</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">fixable</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">the</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">--fix</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">option.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面的结果显示，刚刚配置的两个规则都生效了：禁止使用 <code>var</code>；优先使用 <code>interface</code> 而不是 <code>type</code>。</p><p>需要注意的是，我们使用的是 <code>./node_modules/.bin/eslint</code>，而不是全局的 <code>eslint</code> 脚本，这是因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。</p><p>可是每次执行这么长一段脚本颇有不便，我们可以通过在 <code>package.json</code> 中添加一个 <code>script</code> 来创建一个 npm script 来简化这个步骤：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">&quot;eslint&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;eslint index.ts&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这时只需执行 <code>npm run eslint</code> 即可。</p><h3 id="检查整个项目的-ts-文件" tabindex="-1">检查整个项目的 ts 文件 <a class="header-anchor" href="#检查整个项目的-ts-文件" aria-label="Permalink to &quot;检查整个项目的 ts 文件&quot;">​</a></h3><p>我们的项目源文件一般是放在 <code>src</code> 目录下，所以需要将 <code>package.json</code> 中的 <code>eslint</code> 脚本改为对一个目录进行检查。由于 <code>eslint</code> 默认不会检查 <code>.ts</code> 后缀的文件，所以需要加上参数 <code>--ext .ts</code>：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">&quot;eslint&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;eslint src --ext .ts&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时执行 <code>npm run eslint</code> 即会检查 <code>src</code> 目录下的所有 <code>.ts</code> 后缀的文件。</p><h3 id="在-vscode-中集成-eslint-检查" tabindex="-1">在 VSCode 中集成 ESLint 检查 <a class="header-anchor" href="#在-vscode-中集成-eslint-检查" aria-label="Permalink to &quot;在 VSCode 中集成 ESLint 检查&quot;">​</a></h3><p>在编辑器中集成 ESLint 检查，可以在开发过程中就发现错误，甚至可以在保存时自动修复错误，极大的增加了开发效率。</p><p>要在 VSCode 中集成 ESLint 检查，我们需要先安装 ESLint 插件，点击「扩展」按钮，搜索 ESLint，然后安装即可。</p><p>VSCode 中的 ESLint 插件默认是不会检查 <code>.ts</code> 后缀的，需要在「文件 =&gt; 首选项 =&gt; 设置 =&gt; 工作区」中（也可以在项目根目录下创建一个配置文件 <code>.vscode/settings.json</code>），添加以下配置：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;eslint.validate&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;javascript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;javascriptreact&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;typescript&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;typescript.tsdk&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node_modules/typescript/lib&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这时再打开一个 <code>.ts</code> 文件，将鼠标移到红色提示处，即可看到这样的报错信息了：</p><p><img src="https://ts.xcatliu.com/assets/vscode-eslint-error.png" alt="VSCode ESLint 错误信息"></p><p>我们还可以开启保存时自动修复的功能，通过配置：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;eslint.autoFixOnSave&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;eslint.validate&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;javascript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;javascriptreact&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">&quot;language&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;typescript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">&quot;autoFix&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;typescript.tsdk&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node_modules/typescript/lib&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>就可以在保存文件后，自动修复为：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Tom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Foo</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="使用-prettier-修复格式错误" tabindex="-1">使用 Prettier 修复格式错误 <a class="header-anchor" href="#使用-prettier-修复格式错误" aria-label="Permalink to &quot;使用 Prettier 修复格式错误&quot;">​</a></h3><p>ESLint 包含了一些代码格式的检查，比如空格、分号等。但前端社区中有一个更先进的工具可以用来格式化代码，那就是 <a href="https://prettier.io/" target="_blank" rel="noreferrer">Prettier</a>。</p><p>Prettier 聚焦于代码的格式化，通过语法分析，重新整理代码的格式，让所有人的代码都保持同样的风格。</p><p>首先需要安装 Prettier：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-dev</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">prettier</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后创建一个 <code>prettier.config.js</code> 文件，里面包含 Prettier 的配置项。Prettier 的配置项很少，这里我推荐大家一个配置规则，作为参考：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// prettier.config.js or .prettierrc.js</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 一行最多 100 字符</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">printWidth</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 使用 4 个空格缩进</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">tabWidth</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 不使用缩进符，而使用空格</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">useTabs</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 行尾需要有分号</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">semi</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 使用单引号</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">singleQuote</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 对象的 key 仅在必要时用引号</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">quoteProps</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;as-needed&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// jsx 不使用单引号，而使用双引号</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">jsxSingleQuote</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 末尾不需要逗号</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">trailingComma</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;none&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 大括号内的首尾需要空格</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">bracketSpacing</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// jsx 标签的反尖括号需要换行</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">jsxBracketSameLine</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 箭头函数，只有一个参数的时候，也需要括号</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">arrowParens</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;always&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 每个文件格式化的范围是文件的全部内容</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">rangeStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">rangeEnd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">Infinity</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 不需要写文件开头的 @prettier</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">requirePragma</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 不需要自动在文件开头插入 @prettier</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">insertPragma</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 使用默认的折行标准</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">proseWrap</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;preserve&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 根据显示样式决定 html 要不要折行</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">htmlWhitespaceSensitivity</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;css&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 换行符使用 lf</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">endOfLine</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;lf&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>接下来安装 VSCode 中的 Prettier 插件，然后修改 <code>.vscode/settings.json</code>：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;files.eol&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;editor.tabSize&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;editor.formatOnSave&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;editor.defaultFormatter&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;esbenp.prettier-vscode&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;eslint.autoFixOnSave&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;eslint.validate&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;javascript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;javascriptreact&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">&quot;language&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;typescript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">&quot;autoFix&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;typescript.tsdk&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node_modules/typescript/lib&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这样就实现了保存文件时自动格式化并且自动修复 ESLint 错误。</p><p>需要注意的是，由于 ESLint 也可以检查一些代码格式的问题，所以在和 Prettier 配合使用时，我们一般会把 ESLint 中的代码格式相关的规则禁用掉，否则就会有冲突了。</p><h3 id="使用-alloyteam-的-eslint-配置" tabindex="-1">使用 AlloyTeam 的 ESLint 配置 <a class="header-anchor" href="#使用-alloyteam-的-eslint-配置" aria-label="Permalink to &quot;使用 AlloyTeam 的 ESLint 配置&quot;">​</a></h3><p>ESLint 原生的规则和 <code>@typescript-eslint/eslint-plugin</code> 的规则太多了，而且原生的规则有一些在 TypeScript 中支持的不好，需要禁用掉。</p><p>这里我推荐使用 <a href="https://github.com/AlloyTeam/eslint-config-alloy#typescript" target="_blank" rel="noreferrer">AlloyTeam ESLint 规则中的 TypeScript 版本</a>，它已经为我们提供了一套完善的配置规则，并且与 Prettier 是完全兼容的（eslint-config-alloy 不包含任何代码格式的规则，代码格式的问题交给更专业的 Prettier 去处理）。</p><p>安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-dev</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">eslint</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">typescript</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@typescript-eslint/parser</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@typescript-eslint/eslint-plugin</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">eslint-config-alloy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在你的项目根目录下创建 <code>.eslintrc.js</code>，并将以下内容复制到文件中即可：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">extends</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;alloy&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;alloy/typescript&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">env</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 您的环境变量（包含多个预定义的全局变量）</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// Your environments (which contains several predefined global variables)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// browser: true,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// node: true,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// mocha: true,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// jest: true,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// jquery: true</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">globals</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 您的全局变量（设置为 false 表示它不允许被重新赋值）</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// Your global variables (setting to false means it&#39;s not allowed to be reassigned)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// myGlobal: false</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">rules</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 自定义您的规则</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// Customize your rules</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>更多的使用方法，请参考 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noreferrer">AlloyTeam ESLint 规则</a></p><h3 id="使用-eslint-检查-tsx-文件" tabindex="-1">使用 ESLint 检查 tsx 文件 <a class="header-anchor" href="#使用-eslint-检查-tsx-文件" aria-label="Permalink to &quot;使用 ESLint 检查 tsx 文件&quot;">​</a></h3><p>如果需要同时支持对 tsx 文件的检查，则需要对以上步骤做一些调整：</p><h4 id="安装-eslint-plugin-react" tabindex="-1">安装 <code>eslint-plugin-react</code> <a class="header-anchor" href="#安装-eslint-plugin-react" aria-label="Permalink to &quot;安装 \`eslint-plugin-react\`&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-dev</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">eslint-plugin-react</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="package-json-中的-scripts-eslint-添加-tsx-后缀" tabindex="-1">package.json 中的 scripts.eslint 添加 <code>.tsx</code> 后缀 <a class="header-anchor" href="#package-json-中的-scripts-eslint-添加-tsx-后缀" aria-label="Permalink to &quot;package.json 中的 scripts.eslint 添加 \`.tsx\` 后缀&quot;">​</a></h4><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">&quot;eslint&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;eslint src --ext .ts,.tsx&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="vscode-的配置中新增-typescriptreact-检查" tabindex="-1">VSCode 的配置中新增 typescriptreact 检查 <a class="header-anchor" href="#vscode-的配置中新增-typescriptreact-检查" aria-label="Permalink to &quot;VSCode 的配置中新增 typescriptreact 检查&quot;">​</a></h4><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;files.eol&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">n&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;editor.tabSize&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;editor.formatOnSave&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;editor.defaultFormatter&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;esbenp.prettier-vscode&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;eslint.autoFixOnSave&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;eslint.validate&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;javascript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;javascriptreact&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">&quot;language&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;typescript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">&quot;autoFix&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">&quot;language&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;typescriptreact&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">&quot;autoFix&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;typescript.tsdk&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node_modules/typescript/lib&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="使用-alloyteam-eslint-规则中的-typescript-react-版本" tabindex="-1">使用 AlloyTeam ESLint 规则中的 TypeScript React 版本 <a class="header-anchor" href="#使用-alloyteam-eslint-规则中的-typescript-react-版本" aria-label="Permalink to &quot;使用 AlloyTeam ESLint 规则中的 TypeScript React 版本&quot;">​</a></h4><p><a href="https://github.com/AlloyTeam/eslint-config-alloy#typescript-react" target="_blank" rel="noreferrer">AlloyTeam ESLint 规则中的 TypeScript React 版本</a></p><h2 id="troubleshootings" tabindex="-1">Troubleshootings <a class="header-anchor" href="#troubleshootings" aria-label="Permalink to &quot;Troubleshootings&quot;">​</a></h2><h3 id="cannot-find-module-typescript-eslint-parser" tabindex="-1">Cannot find module &#39;@typescript-eslint/parser&#39; <a class="header-anchor" href="#cannot-find-module-typescript-eslint-parser" aria-label="Permalink to &quot;Cannot find module &#39;@typescript-eslint/parser&#39;&quot;">​</a></h3><p>你运行的是全局的 eslint，需要改为运行 <code>./node_modules/.bin/eslint</code>。</p><h3 id="vscode-没有显示出-eslint-的报错" tabindex="-1">VSCode 没有显示出 ESLint 的报错 <a class="header-anchor" href="#vscode-没有显示出-eslint-的报错" aria-label="Permalink to &quot;VSCode 没有显示出 ESLint 的报错&quot;">​</a></h3><ol><li>检查「文件 =&gt; 首选项 =&gt; 设置」中有没有配置正确</li><li>检查必要的 npm 包有没有安装</li><li>检查 <code>.eslintrc.js</code> 有没有配置</li><li>检查文件是不是在 <code>.eslintignore</code> 中</li></ol><p>如果以上步骤都不奏效，则可以在「文件 =&gt; 首选项 =&gt; 设置」中配置 <code>&quot;eslint.trace.server&quot;: &quot;messages&quot;</code>，按 <code>Ctrl</code>+<code>Shift</code>+<code>U</code> 打开输出面板，然后选择 ESLint 输出，查看具体错误。</p><p><img src="https://ts.xcatliu.com/assets/vscode-output-eslint.png" alt="VSCode 的 ESLint 输出"></p><h3 id="为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错" tabindex="-1">为什么有些定义了的变量（比如使用 <code>enum</code> 定义的变量）未使用，ESLint 却没有报错？ <a class="header-anchor" href="#为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错" aria-label="Permalink to &quot;为什么有些定义了的变量（比如使用 \`enum\` 定义的变量）未使用，ESLint 却没有报错？&quot;">​</a></h3><p>因为无法支持这种变量定义的检查。建议在 <code>tsconfig.json</code> 中添加以下配置，使 <code>tsc</code> 编译过程能够检查出定义了未使用的变量：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">&quot;noUnusedLocals&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">&quot;noUnusedParameters&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了" tabindex="-1">启用了 noUnusedParameters 之后，只使用了第二个参数，但是又必须传入第一个参数，这就会报错了 <a class="header-anchor" href="#启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了" aria-label="Permalink to &quot;启用了 noUnusedParameters 之后，只使用了第二个参数，但是又必须传入第一个参数，这就会报错了&quot;">​</a></h3><p>第一个参数以下划线开头即可，参考 <a href="https://github.com/Microsoft/TypeScript/issues/9458" target="_blank" rel="noreferrer">https://github.com/Microsoft/TypeScript/issues/9458</a></p><h1 id="编译选项" tabindex="-1">编译选项 <a id="编译选项"></a> <a class="header-anchor" href="#编译选项" aria-label="Permalink to &quot;编译选项 &lt;a id=&quot;编译选项&quot;/&gt;&quot;">​</a></h1><p>TypeScript 提供了非常多的编译选项，但是官方文档对每一项的解释很抽象，这一章会详细介绍每一个选项的作用，并给出对应的示例。</p><p>索引（点击选项跳转到详细介绍）：</p><table><thead><tr><th>选项</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><a href="#allowjs"><code>allowJs</code></a></td><td><code>boolean</code></td><td><code>false</code></td><td>允许编译 js 文件</td></tr><tr><td><a href="#allowsyntheticdefaultimports"><code>allowSyntheticDefaultImports</code></a></td><td><code>boolean</code></td><td><code>false</code></td><td>允许对不包含默认导出的模块使用默认导入。这个选项不会影响生成的代码，只会影响类型检查。</td></tr></tbody></table><h2 id="allowjs" tabindex="-1">allowJs <a class="header-anchor" href="#allowjs" aria-label="Permalink to &quot;allowJs&quot;">​</a></h2><blockquote><p>允许编译 js 文件。</p></blockquote><p>设置为 <code>true</code> 时，js 文件会被 tsc 编译，否则不会。一般在项目中 js, ts 混合开发时需要设置。</p><p><a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/compiler-options/01-allowJs" target="_blank" rel="noreferrer">查看示例</a></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 设置为 true 时，编译后的文件包含 foo.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">lib</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">foo.js</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">└──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">index.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">src</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">foo.js</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">└──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">index.ts</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">package.json</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 设置为 false 时，编译后的文件不包含 foo.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">lib</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">└──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">index.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">src</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">foo.js</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">└──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">index.ts</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">package.json</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="allowsyntheticdefaultimports" tabindex="-1">allowSyntheticDefaultImports <a class="header-anchor" href="#allowsyntheticdefaultimports" aria-label="Permalink to &quot;allowSyntheticDefaultImports&quot;">​</a></h2><blockquote><p>允许对不包含默认导出的模块使用默认导入。这个选项不会影响生成的代码，只会影响类型检查。</p></blockquote><p><code>export = foo</code> 是 ts 为了兼容 commonjs 创造的语法，它对应于 commonjs 中的 <code>module.exports = foo</code>。</p><p>在 ts 中，如果要引入一个通过 <code>export = foo</code> 导出的模块，标准的语法是 <code>import foo = require(&#39;foo&#39;)</code>，或者 <code>import * as foo from &#39;foo&#39;</code>。</p><p>但由于历史原因，我们已经习惯了使用 <code>import foo from &#39;foo&#39;</code>。</p><p>这个选项就是为了解决这个问题。当它设置为 <code>true</code> 时，允许使用 <code>import foo from &#39;foo&#39;</code> 来导入一个通过 <code>export = foo</code> 导出的模块。当它设置为 <code>false</code> 时，则不允许，会报错。</p><p>当然，我们一般不会在 ts 文件中使用 <code>export = foo</code> 来导出模块，而是在[写（符合 commonjs 规范的）第三方库的声明文件]时，才会用到 <code>export = foo</code> 来导出类型。</p><p>比如 React 的声明文件中，就是通过 <code>export = React</code> 来导出类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">React</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 声明 React 的类型</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时若我们通过 <code>import React from &#39;react&#39;</code> 来导入 react 则会报错，<a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/compiler-options/02-allowSyntheticDefaultImports" target="_blank" rel="noreferrer">查看示例</a> ：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">React</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;react&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Module &#39;&quot;typescript-tutorial/examples/compiler-options/02-allowSyntheticDefaultImports/false/node_modules/@types/react/index&quot;&#39; can only be default-imported using the &#39;esModuleInterop&#39; flagts(1259)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>解决办法就是将 <code>allowSyntheticDefaultImports</code> 设置为 <code>true</code>。</p>`,136)]))}const u=n(e,[["render",o]]);export{d as __pageData,u as default};
