import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8218e65d.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/jQuery.md","filePath":"JavaScript/jQuery.md","lastUpdated":1711503121000}'),e={name:"JavaScript/jQuery.md"},o=l(`<h2 id="_1-jquery-概述" tabindex="-1">1 jQuery 概述 <a class="header-anchor" href="#_1-jquery-概述" aria-label="Permalink to &quot;1 jQuery 概述&quot;">​</a></h2><h3 id="_1-1-javascript-库" tabindex="-1">1.1 JavaScript 库 <a class="header-anchor" href="#_1-1-javascript-库" aria-label="Permalink to &quot;1.1 JavaScript 库&quot;">​</a></h3><p>库，是用于开发软件的子程序集合。库和可执行文件的区别是，库不是独立程序，他们是向其他程序提供服务的代码库链接。</p><p><strong>JavaScript</strong> 库：即 library，是一个<strong>封装</strong>好的特定的<strong>集合</strong>（方法和函数）。就是把各种常用的代码片段，组织起来放在一个 js 文件里，组成一个包，这个包就是 JavaScript 库。</p><p>简单理解：就是一个 JS文件，里面对我们原生 js 代码进行了封装，存放到里面。这样我们就可以快速高效的使用这些封装好的功能了。</p><p>比如 jQuery，就是为了快速方便的操作 DOM，里面基本都是函数（方法）。再比如 Prototype、Dojo、<a href="https://so.csdn.net/so/search?q=Extjs&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">Extjs</a> 、 YUI、移动端的 zepto 等等，这些都是优秀的 JavaScript 库。它们都是对原生 JavaScript 的封装，<strong>内部都是用 JavaScript 实现的</strong>。</p><h3 id="_1-2-jquery" tabindex="-1">1.2 jQuery <a class="header-anchor" href="#_1-2-jquery" aria-label="Permalink to &quot;1.2 jQuery&quot;">​</a></h3><p>jQuery 是一个<strong>快速、简洁的 JavaScript 框架</strong>，是继 Prototype 之后又一个优秀的 JavaScript 代码库（ 或 JavaScript 框架 ）。 jQuery 设计的宗旨是 “<strong>write Less，Do More</strong>”，即倡导写更少的代码，做更多的事情。</p><p>jQuery = javascript Query（查询）。意思是查询 js，把 js 中的 DOM 操作做了封装，我们可以快速的查询使用里面的功能。</p><p>它封装 JavaScript 常用的功能代码，提供一种简便的 JavaScript 设计模式，优化 HTML 文档操作、事件处理、动画设计和 Ajax 交互。</p><p><strong>优势</strong>：</p><ol><li>轻量级。体积小，不会影响页面加载速度</li><li>强大的选择器</li><li>方便的选择页面元素（模仿 css 选择器更精确、更灵活）</li><li>出色的 DOM 操作的封装</li><li>对事件、样式、动画支持，大大简化了 DOM 操作</li><li>跨浏览器兼容。基本兼容了现在主流的浏览器</li><li>链式操作、隐式迭代</li><li>支持插件扩展开发。有着丰富的第三方插件。</li><li>免费、开源</li></ol><h2 id="_2-jquery-基本使用" tabindex="-1">2 jQuery 基本使用 <a class="header-anchor" href="#_2-jquery-基本使用" aria-label="Permalink to &quot;2 jQuery 基本使用&quot;">​</a></h2><p><a href="https://jquery.cuishifeng.cn/" target="_blank" rel="noreferrer">中文文档</a></p><h3 id="_2-1-jquery-下载" tabindex="-1">2.1 jQuery 下载 <a class="header-anchor" href="#_2-1-jquery-下载" aria-label="Permalink to &quot;2.1 jQuery 下载&quot;">​</a></h3><p>① 官网地址：<a href="https://jquery.com/" target="_blank" rel="noreferrer">jQuery</a></p><p>② 版本区别：</p><ul><li>1x：兼容IE678,使用最为广泛，官网只做BUG维护，功能不再新增。因此一般项目来说，使用1.X版本就可以了。</li><li>2x：不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x。(过渡)</li><li>3x：不兼容ie678，只支持最新的浏览器。除非特殊要求，一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。</li></ul><h3 id="_2-2-导入方式" tabindex="-1">2.2 导入方式 <a class="header-anchor" href="#_2-2-导入方式" aria-label="Permalink to &quot;2.2 导入方式&quot;">​</a></h3><p>方式一：本地导入</p><p>直接在需要使用 jQuery 的页面引入 .js 文件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot; jQuery.js 文件路径&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>方式二：在线导入</p><p>我们可以通过在 script 的 src 属性中写一个网址来导入在线的 jquery 代码。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;http://code.jquery.com/jquery-latest.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-3-jquery-的入口函数" tabindex="-1">2.3 jQuery 的入口函数 <a class="header-anchor" href="#_2-3-jquery-的入口函数" aria-label="Permalink to &quot;2.3 jQuery 的入口函数&quot;">​</a></h3><ul><li>Js 入口函数会在 DOM 元素加载完毕并且图片也加载完毕之后再执行</li><li>jQuery 入口函数会等到 DOM 元素加载完毕，但不会等到图片加载完毕再执行</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">ready</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello jquery&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#61AFEF;">jQuery</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">ready</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello jquery&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 简化方式，推荐</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hi jquery&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#61AFEF;">jQuery</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hi jquery&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#D19A66;">1234567891011121314</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_2-4-jquery-的顶级对象" tabindex="-1">2.4 jQuery 的顶级对象 $ <a class="header-anchor" href="#_2-4-jquery-的顶级对象" aria-label="Permalink to &quot;2.4 jQuery 的顶级对象 $&quot;">​</a></h3><ul><li><p><code>$</code>是 jQuery 的别称，在代码中可以使用 jQuery 代替<code>$</code>，但为了方便，通常都使用<code>$</code>。</p></li><li><p>冲突——<strong>多库共存</strong></p><p>原因：随着jQuery的流行，采用jQuery和<code>$</code>符为命名空间的 js 库越来越多，当然 jQuery 的<code>$</code>符也是参照的 Prototype库的，所以当多个库同时以<code>$</code>符或者 jQuery 为命名空间时，那么此时，就会产生冲突。</p><p>解决方法：</p></li></ul><ol><li>释放使用权</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">noConflict</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//1.释放操作在其他函数之前</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//2.释放后不能用dollar符</span></span>
<span class="line"><span style="color:#D19A66;">123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>修改访问符号</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">suiBian</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">noConflict</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//此时suiBian为新的访问符号</span></span>
<span class="line"><span style="color:#D19A66;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-5-dom对象-和-jquery-对象" tabindex="-1">2.5 DOM对象 和 jQuery 对象 <a class="header-anchor" href="#_2-5-dom对象-和-jquery-对象" aria-label="Permalink to &quot;2.5 DOM对象 和 jQuery 对象&quot;">​</a></h3><p>DOM 对象：用原生 js 获取过来的对象就是 DOM 对象。</p><p>jQuery 对象：用 jQuery 方式获取过来的对象就是 jQuery 对象。本质：通过 $ 把 DOM 元素进行了封装（<a href="https://so.csdn.net/so/search?q=%E4%BC%AA%E6%95%B0%E7%BB%84&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">伪数组</a>形式存储）。</p><p><strong>区别</strong>：jQuery 对象只能使用 jQuery 方法，反之亦然。</p><p>相互转换：</p><ul><li>DOM --&gt; jQuery</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;DOM对象&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>jQuery --&gt; DOM（两种方式）</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;DOM对象&#39;</span><span style="color:#ABB2BF;">)[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// index 是索引号</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;DOM对象&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_3-jquery-常用-api" tabindex="-1">3 jQuery 常用 API <a class="header-anchor" href="#_3-jquery-常用-api" aria-label="Permalink to &quot;3 jQuery 常用 API&quot;">​</a></h2><h3 id="_3-1-jquery-选择器" tabindex="-1">3.1 jQuery 选择器 <a class="header-anchor" href="#_3-1-jquery-选择器" aria-label="Permalink to &quot;3.1 jQuery 选择器&quot;">​</a></h3><h4 id="_3-1-1-jquery-基础选择器" tabindex="-1">3.1.1 jQuery 基础选择器 <a class="header-anchor" href="#_3-1-1-jquery-基础选择器" aria-label="Permalink to &quot;3.1.1 jQuery 基础选择器&quot;">​</a></h4><p><a href="https://so.csdn.net/so/search?q=jQuery%E9%80%89%E6%8B%A9%E5%99%A8&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">jQuery选择器</a>虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。</p><blockquote><p>$(“选择器”) // 选择器格式与 css 选择器格式一摸一样</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(&quot;#id&quot;);</td><td>获取指定 ID 的元素</td></tr><tr><td>类选择器</td><td>$(&quot;.class&quot;);</td><td>获取同一类 class 的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,li,p”);</td><td>使用逗号分隔，获取多个元素</td></tr><tr><td>交集选择器</td><td>$(“div.show”);</td><td>获取 class 为 show 的 div 元素</td></tr><tr><td>全选选择器</td><td>$(&quot;*&quot;);</td><td>匹配所有元素</td></tr></tbody></table><h4 id="_3-1-2-jquery-层级选择器" tabindex="-1">3.1.2 jQuery 层级选择器 <a class="header-anchor" href="#_3-1-2-jquery-层级选择器" aria-label="Permalink to &quot;3.1.2 jQuery 层级选择器&quot;">​</a></h4><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td>使用 &gt; 号，获取儿子层级的元素；注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td>使用空格，代表后代选择器，获取 ul 下的所有 li 元素，包括孙子等</td></tr></tbody></table><h4 id="_3-1-3-过滤选择器" tabindex="-1">3.1.3 过滤选择器 <a class="header-anchor" href="#_3-1-3-过滤选择器" aria-label="Permalink to &quot;3.1.3 过滤选择器&quot;">​</a></h4><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:eq(index)</td><td>$(“li:eq(1)”);</td><td>获取到的li元素中，选择索引号为1的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(“li:odd”);</td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”);</td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><h4 id="_3-1-4-筛选选择器-方法" tabindex="-1">3.1.4 筛选选择器（方法） <a class="header-anchor" href="#_3-1-4-筛选选择器-方法" aria-label="Permalink to &quot;3.1.4 筛选选择器（方法）&quot;">​</a></h4><blockquote><p>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>parent()</td><td>$(&quot;.first&quot;).parent();</td><td>查找父亲</td></tr><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”)，后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(&quot;.first&quot;).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>next()</td><td>$(&quot;.first&quot;).next();</td><td>查找当前元素之后的下一个兄弟</td></tr><tr><td>nextAll()</td><td>$(&quot;.first&quot;).nextAll();</td><td>查找当前元素之后的所有同辈元素</td></tr><tr><td>prev()</td><td>$(&quot;.last&quot;).prev();</td><td>查找当前元素之前的上一个兄弟</td></tr><tr><td>prevAll()</td><td>$(“last”).prevAll();</td><td>查找当前元素之前的所有同辈元素</td></tr><tr><td>hasClass(class)</td><td>$(“div”).hasClass(“show”)</td><td>检查当前的元素是否含有某个特定的类，如果有，则返回 true</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”)，index 从0开始</td></tr></tbody></table><h4 id="_3-1-5-排他思想" tabindex="-1">3.1.5 排他思想 <a class="header-anchor" href="#_3-1-5-排他思想" aria-label="Permalink to &quot;3.1.5 排他思想&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 对自己设置变化</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">siblings</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 给其他兄弟去掉变化</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#D19A66;">123456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_3-1-6-链式编程" tabindex="-1">3.1.6 链式编程 <a class="header-anchor" href="#_3-1-6-链式编程" aria-label="Permalink to &quot;3.1.6 链式编程&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">siblings</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 对自己设置变化,给其他兄弟去掉变化</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#D19A66;">12345</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_3-1-7-隐式迭代" tabindex="-1">3.1.7 隐式迭代 <a class="header-anchor" href="#_3-1-7-隐式迭代" aria-label="Permalink to &quot;3.1.7 隐式迭代&quot;">​</a></h4><p>遍历 jQuery 对象内部 DOM 元素（伪数组形式存储）的过程就叫<strong>隐式迭代</strong></p><p><strong>简单理解：给匹配的所有元素进行循环遍历，执行相应的方法，而不是我们再进行循环，简化我们的操作，方便我们的调用。</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 给四个div设置背景颜色为粉色 jquery对象不能使用style</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;background&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;pink&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 隐式迭代就是把匹配的所有元素内部进行遍历循环，给每一个元素添加css这个方法</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul li&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;color&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">1234</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-2-jquery-样式操作" tabindex="-1">3.2 jQuery 样式操作 <a class="header-anchor" href="#_3-2-jquery-样式操作" aria-label="Permalink to &quot;3.2 jQuery 样式操作&quot;">​</a></h3><h4 id="_3-2-1-操作-css-方法" tabindex="-1">3.2.1 操作 css 方法 <a class="header-anchor" href="#_3-2-1-操作-css-方法" aria-label="Permalink to &quot;3.2.1 操作 css 方法&quot;">​</a></h4><p>jQuery 可以使用 css 方法来修改简单元素样式；也可以操作类，修改多个样式。</p><ul><li>参数只写属性名，则是返回属性值</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;color&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>参数是<strong>属性名</strong>，<strong>属性值</strong>，中间由逗号分隔，是一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;color&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开，属性可以不用加引号</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">({</span><span style="color:#98C379;">&quot;color&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;font-size&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;20px&quot;</span><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-2-2-设置样式类方法" tabindex="-1">3.2.2 设置样式类方法 <a class="header-anchor" href="#_3-2-2-设置样式类方法" aria-label="Permalink to &quot;3.2.2 设置样式类方法&quot;">​</a></h4><p>作用等同于以前的 classList，可以操作类样式，注意操作类里面的参数不要加点</p><ul><li>添加类</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;current&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>移除类</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">removeClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;current&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>切换类</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toggleClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;current&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-2-3-与原生-js-区别" tabindex="-1">3.2.3 与原生 js 区别 <a class="header-anchor" href="#_3-2-3-与原生-js-区别" aria-label="Permalink to &quot;3.2.3 与原生 js 区别&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// js 中的 className 会覆盖元素原先里面的类名</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">one</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.one&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">one</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">className</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// one : class=&quot;two&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// jQuery 里面的类操作只是对指定类进行操作，不影响原先的类名</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.one&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// one: class=&quot;one two&quot;</span></span>
<span class="line"><span style="color:#D19A66;">123456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_3-3-jquery-效果" tabindex="-1">3.3 jQuery 效果 <a class="header-anchor" href="#_3-3-jquery-效果" aria-label="Permalink to &quot;3.3 jQuery 效果&quot;">​</a></h3><h4 id="_3-3-1-显示隐藏效果" tabindex="-1">3.3.1 显示隐藏效果 <a class="header-anchor" href="#_3-3-1-显示隐藏效果" aria-label="Permalink to &quot;3.3.1 显示隐藏效果&quot;">​</a></h4><p>① 显示效果</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">]])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>显示隐藏的匹配元素。</li><li>这个就是 ‘show( speed, [callback] )’ 无动画的版本。如果选择的元素是可见的，这个方法将不会改变任何东西。无论这个元素是通过hide()方法隐藏的还是在CSS里设置了display:none;，这个方法都将有效。</li></ul></li><li>显示参数 <ul><li>参数都可以省略，省略后没有动画，直接显示。</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><p>② 隐藏效果</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">hide</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">]])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>隐藏显示的元素。</li><li>这个就是 ‘hide( speed, [callback] )’ 的无动画版。如果选择的元素是隐藏的，这个方法将不会改变任何东西。</li></ul></li><li>显示参数 <ul><li>参数都可以省略，省略后没有动画，直接隐藏。</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><h4 id="_3-3-2-滑动效果" tabindex="-1">3.3.2 滑动效果 <a class="header-anchor" href="#_3-3-2-滑动效果" aria-label="Permalink to &quot;3.3.2 滑动效果&quot;">​</a></h4><p>① 下滑效果</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">slideDown</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>通过高度变化（向下增大）来动态地显示所有匹配的元素，在显示完成后可选地触发一个回调函数。</li><li>这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式显示出来。</li></ul></li><li>显示参数 <ul><li>参数都可以省略。</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><p>② 上滑效果</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">slideUp</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">]])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>通过高度变化（向上减小）来动态地隐藏所有匹配的元素，在隐藏完成后可选地触发一个回调函数。</li><li>这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式隐藏起来。</li></ul></li><li>显示参数 <ul><li>参数都可以省略。</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><p>③ 滑动效果</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">slideToggle</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>通过高度变化来切换所有匹配元素的可见性，并在切换完成后可选地触发一个回调函数。</li><li>这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式隐藏或显示。</li></ul></li><li>显示参数 <ul><li>参数都可以省略。</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><h4 id="_3-3-3-事件切换" tabindex="-1">3.3.3 事件切换 <a class="header-anchor" href="#_3-3-3-事件切换" aria-label="Permalink to &quot;3.3.3 事件切换&quot;">​</a></h4><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">hover</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">over</span><span style="color:#ABB2BF;">,]</span><span style="color:#E06C75;">out</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>一个模仿悬停事件（鼠标移动到一个对象上面及移出这个对象）的方法。这是一个自定义的方法，它为频繁使用的任务提供了一种“保持在其中”的状态。</li><li>当鼠标移动到一个匹配的元素上面时，会触发指定的第一个函数。当鼠标移出这个元素时，会触发指定的第二个函数。而且，会伴随着对鼠标是否仍然处在特定元素中的检测（例如，处在div中的图像），如果是，则会继续保持“悬停”状态，而不触发移出事件（修正了使用mouseout事件的一个常见错误）。</li></ul></li><li>显示参数 <ul><li><code>over</code>:鼠标移到元素上要触发的函数（相当于 mouseenter）。</li><li><code>out</code>:鼠标移出元素要触发的函数（相当于 mouseenter）。</li></ul></li></ul><h4 id="_3-3-4-动画队列及其停止排队方法" tabindex="-1">3.3.4 动画队列及其停止排队方法 <a class="header-anchor" href="#_3-3-4-动画队列及其停止排队方法" aria-label="Permalink to &quot;3.3.4 动画队列及其停止排队方法&quot;">​</a></h4><p>① 动画或效果队列</p><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>② 停止排队</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">stop</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">clearQueue</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">jumpToEnd</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>停止所有在指定元素上正在运行的动画。</li><li>如果队列中有等待执行的动画(并且clearQueue没有设为true)，他们将被马上执行。</li></ul></li><li>显示参数 <ul><li><code>queue</code>:用来停止动画的队列名称。</li><li><code>clearQueue</code>:如果设置成true，则清空队列。可以立即结束动画。</li><li><code>jumpToEnd</code>:如果设置成true，则完成队列。可以立即完成动画。</li></ul></li></ul><blockquote><p>注意：stop() 写到动画或者效果的<strong>前面</strong>，相当于停止结束上一次的动画。</p></blockquote><h4 id="_3-3-5-淡入淡出效果" tabindex="-1">3.3.5 淡入淡出效果 <a class="header-anchor" href="#_3-3-5-淡入淡出效果" aria-label="Permalink to &quot;3.3.5 淡入淡出效果&quot;">​</a></h4><p>① 淡入效果</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">fadeIn</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>通过不透明度的变化来实现所有匹配元素的淡入效果，并在动画完成后可选地触发一个回调函数。</li><li>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。</li></ul></li><li>显示参数 <ul><li>参数都可以省略</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><p>② 淡出效果</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">fadeOut</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>通过不透明度的变化来实现所有匹配元素的淡出效果，并在动画完成后可选地触发一个回调函数。</li><li>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。</li></ul></li><li>显示参数 <ul><li>参数都可以省略。</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><p>③ 淡入淡出切换效果</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">fadeToggle</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">]])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>通过不透明度的变化来开关所有匹配元素的淡入和淡出效果，并在动画完成后可选地触发一个回调函数。</li><li>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。</li></ul></li><li>显示参数 <ul><li>参数都可以省略。</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><p>④ 渐进方式调整到指定的不透明度</p><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">fadeTo</span><span style="color:#ABB2BF;">([[</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">],</span><span style="color:#E06C75;">opacity</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">]])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>把所有匹配元素的不透明度以渐进方式调整到指定的不透明度，并在动画完成后可选地触发一个回调函数。</li><li>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。</li></ul></li><li>显示参数 <ul><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>opacity</code>:一个0至1之间表示透明度的数字。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><h4 id="_3-3-6-自定义动画-animate" tabindex="-1">3.3.6 自定义动画 animate <a class="header-anchor" href="#_3-3-6-自定义动画-animate" aria-label="Permalink to &quot;3.3.6 自定义动画 animate&quot;">​</a></h4><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">animate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">easing</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>用于创建自定义动画的函数。</li><li>这个函数的关键在于指定动画形式及结果样式属性对象。这个对象中每个属性都表示一个可以变化的样式属性（如“height”、“top”或“opacity”）。注意：所有指定的属性必须用骆驼形式，比如用marginLeft代替margin-left。</li><li>而每个属性的值表示这个样式属性到多少时动画结束。如果是一个数值，样式属性就会从当前的值渐变到指定的值。如果使用的是“hide”、“show”或“toggle”这样的字符串值，则会为该属性调用默认的动画形式。</li></ul></li><li>显示参数 <ul><li><code>params</code>:一组包含作为动画属性和终值的样式属性和及其值的集合（用对象实现），<strong>必须写</strong>。</li><li><code>speed</code>:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li><code>easing</code>:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li><code>fn</code>:在动画完成时执行的函数，每个元素执行一次。</li></ul></li></ul><h3 id="_3-4-属性操作" tabindex="-1">3.4 属性操作 <a class="header-anchor" href="#_3-4-属性操作" aria-label="Permalink to &quot;3.4 属性操作&quot;">​</a></h3><h4 id="_3-4-1-设置或获取元素固有属性值-prop" tabindex="-1">3.4.1 设置或获取元素固有属性值 prop() <a class="header-anchor" href="#_3-4-1-设置或获取元素固有属性值-prop" aria-label="Permalink to &quot;3.4.1 设置或获取元素固有属性值 prop()&quot;">​</a></h4><p>所谓元素固有属性就是元素本身自带的属性，如<code>&lt;a&gt;</code>元素里面的<code>herf</code>，<code>&lt;input&gt;</code>元素里面的<code>type</code>。</p><p>① 获取属性语法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">prop</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;属性&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>② 设置属性语法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">prop</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;属性&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;属性值&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-4-2-设置或获取元素自定义属性值-attr" tabindex="-1">3.4.2 设置或获取元素自定义属性值 attr() <a class="header-anchor" href="#_3-4-2-设置或获取元素自定义属性值-attr" aria-label="Permalink to &quot;3.4.2 设置或获取元素自定义属性值 attr()&quot;">​</a></h4><p>自定义属性就是用户自己给元素添加的属性。比如给<code>li</code>添加<code>index=&quot;1&quot;</code>。</p><p>① 获取属性语法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;属性&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>② 设置属性语法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;属性&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;属性值&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>该方法也可用于获取 H5 自定义属性。</p></blockquote><h4 id="_3-4-3-数据缓存-data" tabindex="-1">3.4.3 数据缓存 data() <a class="header-anchor" href="#_3-4-3-数据缓存-data" aria-label="Permalink to &quot;3.4.3 数据缓存 data()&quot;">​</a></h4><p>data()方法可以在指定的元素上存取数据，并不会修改DOM 的元素结构，一旦页面刷新，之前存放的数据都将被移除。</p><p>① 附加数据语法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// 向被选元素附加数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>② 获取数据语法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// 从被选元素获取数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>如果浏览器支持 HTML5，同样可以读取该 DOM 中使用 data-[key] = [value] 所存储的值。</p></blockquote><h3 id="_3-5-jquery-内容文本值" tabindex="-1">3.5 jQuery 内容文本值 <a class="header-anchor" href="#_3-5-jquery-内容文本值" aria-label="Permalink to &quot;3.5 jQuery 内容文本值&quot;">​</a></h3><h4 id="_3-5-1-普通元素内容-html" tabindex="-1">3.5.1 普通元素内容 html() <a class="header-anchor" href="#_3-5-1-普通元素内容-html" aria-label="Permalink to &quot;3.5.1 普通元素内容 html()&quot;">​</a></h4><blockquote><p>相当于原生 js 中的 innerHTML</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 获取元素的内容</span></span>
<span class="line"><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;内容&quot;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// 设置元素的内容</span></span>
<span class="line"><span style="color:#D19A66;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-5-2-普通元素文本内容-text" tabindex="-1">3.5.2 普通元素文本内容 text() <a class="header-anchor" href="#_3-5-2-普通元素文本内容-text" aria-label="Permalink to &quot;3.5.2 普通元素文本内容 text()&quot;">​</a></h4><blockquote><p>相当于原生 js 中的 innerText</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 获取元素的内容</span></span>
<span class="line"><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;内容&quot;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// 设置元素的内容</span></span>
<span class="line"><span style="color:#D19A66;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-5-3-表单值-val" tabindex="-1">3.5.3 表单值 val() <a class="header-anchor" href="#_3-5-3-表单值-val" aria-label="Permalink to &quot;3.5.3 表单值 val()&quot;">​</a></h4><blockquote><p>相当于原生 js 中的 value</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">val</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 获取元素的内容</span></span>
<span class="line"><span style="color:#61AFEF;">val</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;内容&quot;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// 设置元素的内容</span></span>
<span class="line"><span style="color:#D19A66;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-6-jquery-元素操作" tabindex="-1">3.6 jQuery 元素操作 <a class="header-anchor" href="#_3-6-jquery-元素操作" aria-label="Permalink to &quot;3.6 jQuery 元素操作&quot;">​</a></h3><h4 id="_3-6-1-遍历元素" tabindex="-1">3.6.1 遍历元素 <a class="header-anchor" href="#_3-6-1-遍历元素" aria-label="Permalink to &quot;3.6.1 遍历元素&quot;">​</a></h4><p>隐式迭代：对同一类元素做相同操作。如果做不同操作，需要使用遍历：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">each</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">domEle</span><span style="color:#ABB2BF;">) {</span><span style="color:#E06C75;">xxx</span><span style="color:#ABB2BF;">;})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 也可以写成</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">each</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">),</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">domEle</span><span style="color:#ABB2BF;">) {</span><span style="color:#E06C75;">xxx</span><span style="color:#ABB2BF;">;}))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 主要用于处理数据</span></span>
<span class="line"><span style="color:#D19A66;">12345</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><ul><li>index 是每个元素的索引号，domEle 是每个 DOM 元素对象，不是 jQuery 对象</li><li>想要使用 jQuery 方法，就要给这个 dom 元素转换为 jQuery 对象 $(domEle)</li></ul></blockquote><h4 id="_3-6-2-创建元素" tabindex="-1">3.6.2 创建元素 <a class="header-anchor" href="#_3-6-2-创建元素" aria-label="Permalink to &quot;3.6.2 创建元素&quot;">​</a></h4><p>① 内部添加</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//放到最后面，类似原生 appendChild</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>② 外部添加</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">内容</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 把内容放到目标元素前面</span></span>
<span class="line"><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">after</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">内容</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 把内容放到目标元素后面</span></span>
<span class="line"><span style="color:#D19A66;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><ul><li>内部添加元素后是父子关系</li><li>外部添加元素后是兄弟关系</li></ul></blockquote><p>3.6.3 删除元素</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 删除匹配节点（本身）</span></span>
<span class="line"><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 删除匹配节点的子节点</span></span>
<span class="line"><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// 相当于 empty()</span></span>
<span class="line"><span style="color:#D19A66;">123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-7-jquery-尺寸、位置操作" tabindex="-1">3.7 jQuery 尺寸、位置操作 <a class="header-anchor" href="#_3-7-jquery-尺寸、位置操作" aria-label="Permalink to &quot;3.7 jQuery 尺寸、位置操作&quot;">​</a></h3><h4 id="_3-7-1-jquery-尺寸" tabindex="-1">3.7.1 jQuery 尺寸 <a class="header-anchor" href="#_3-7-1-jquery-尺寸" aria-label="Permalink to &quot;3.7.1 jQuery 尺寸&quot;">​</a></h4><table><thead><tr><th>语法</th><th>用法</th></tr></thead><tbody><tr><td>width()/height()</td><td>取得匹配元素宽度和高度值，只算width/height</td></tr><tr><td>innerWidth()/innerHeight()</td><td>取得匹配元素宽度和高度值，包括padding</td></tr><tr><td>outerWidth()/outerHeight()</td><td>取得匹配元素宽度和高度值，包括padding和border</td></tr><tr><td>outerWidth(true)/outerHeight(true)</td><td>取得匹配元素宽度和高度值，包括padding、border和margin</td></tr></tbody></table><blockquote><ul><li>以上参数为空，则获取响应值，返回的是数字型</li><li>如果参数未数字，则是修改相应值</li><li>参数可以不写单位</li></ul></blockquote><h4 id="_3-7-2-jquery-位置" tabindex="-1">3.7.2 jQuery 位置 <a class="header-anchor" href="#_3-7-2-jquery-位置" aria-label="Permalink to &quot;3.7.2 jQuery 位置&quot;">​</a></h4><p>① offset() 设置或获取元素偏移</p><ul><li>offset() 方法设置或返回被选元素相对于文档的偏移坐标，跟父级没有关系。</li><li>该方法有2个属性 left 和 top。offset().top 用于获取距离文档顶部的距离，offset().left 用于获取距离文档左侧的距离。</li><li>可以设置元素的偏移：offset({top:10,left:10})。</li></ul><p>② position() 获取元素偏移</p><ul><li>position() 方法用于返回被选元素相对于<strong>带有定位的父级</strong>偏移坐标，如果父级没有定位，则以文档为准。</li></ul><blockquote><p>该方法只能获取不能设置偏移</p></blockquote><p>③ scrollTop()/scrollLeft() 设置或获取元素被卷去的头部或左侧</p><ul><li>scollTop() 方法设置或返回被选元素卷去的头部。</li><li>scollLeft() 方法设置或返回被选元素卷去的左侧。</li></ul><h2 id="_4-jquery-事件" tabindex="-1">4 jQuery 事件 <a class="header-anchor" href="#_4-jquery-事件" aria-label="Permalink to &quot;4 jQuery 事件&quot;">​</a></h2><h3 id="_4-1-事件注册" tabindex="-1">4.1 事件注册 <a class="header-anchor" href="#_4-1-事件注册" aria-label="Permalink to &quot;4.1 事件注册&quot;">​</a></h3><p>单个事件注册</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">element</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">事件</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){ </span><span style="color:#E06C75;">事件处理程序</span><span style="color:#ABB2BF;"> })  </span><span style="color:#7F848E;font-style:italic;">// 其他事件和原生事件基本一致</span></span>
<span class="line"><span style="color:#D19A66;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-2-事件处理" tabindex="-1">4.2 事件处理 <a class="header-anchor" href="#_4-2-事件处理" aria-label="Permalink to &quot;4.2 事件处理&quot;">​</a></h3><h4 id="_4-2-1-事件处理-on-绑定事件" tabindex="-1">4.2.1 事件处理 on() 绑定事件 <a class="header-anchor" href="#_4-2-1-事件处理-on-绑定事件" aria-label="Permalink to &quot;4.2.1 事件处理 on() 绑定事件&quot;">​</a></h4><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">events</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">selector</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">],</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>在选择元素上绑定一个或多个事件的事件处理函数。</li><li>on() 方法绑定事件处理程序到当前选定的 jQuery 对象中的元素。</li></ul></li><li>显示参数 <ul><li><code>events</code>:一个或多个用空格分隔的事件类型和可选的命名空间，如&quot;click&quot;或&quot;keydown.myPlugin&quot; 。</li><li><code>selector</code>:一个选择器字符串用于过滤器的触发事件的选择器元素的后代。如果选择的&lt; null或省略，当它到达选定的元素，事件总是触发。</li><li><code>data</code>:当一个事件被触发时要传递event.data给事件处理函数。</li><li><code>fn</code>:该事件被触发时执行的函数。 false 值也可以做一个函数的简写，返回false。</li></ul></li><li>优势1</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 同一对象不同操作不同回调</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">mouseenter</span><span style="color:#ABB2BF;">:</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;color&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">mouseleave</span><span style="color:#ABB2BF;">:</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;color&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;black&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 同一对象不同操作相同回调</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mouseenter mouseleave&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toggleClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;current&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#D19A66;">1234567891011121314</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>优势2</li></ul><p>可以事件委派操作。事件委派的定义是：把原来子元素身上的事件绑定到父元素上，就是把事件委派给父元素。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;clicked li&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#D19A66;">123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>优势3</li></ul><p>动态创建的元素，click() 没有办法绑定事件，on() 可以给动态生成元素绑定事件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;clicked li&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;li&gt;click&lt;/li&gt;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">12345</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_4-2-2-事件处理-off-解绑事件" tabindex="-1">4.2.2 事件处理 off() 解绑事件 <a class="header-anchor" href="#_4-2-2-事件处理-off-解绑事件" aria-label="Permalink to &quot;4.2.2 事件处理 off() 解绑事件&quot;">​</a></h4><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">off</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">events</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">selector</span><span style="color:#ABB2BF;">],[</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>在选择元素上移除一个或多个事件的事件处理函数。</li><li>off() 方法移除用 on() 绑定的事件处理程序。</li></ul></li><li>显示参数 <ul><li><code>events</code>:一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如&quot;click&quot;, “keydown.myPlugin”, 或者 “.myPlugin”。</li><li><code>selector</code>:一个最初传递到 .on() 事件处理程序附加的选择器。</li><li><code>fn</code>:事件处理程序函数以前附加事件上，或特殊值 false。</li></ul></li><li>示例</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">off</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 解除所有事件</span></span>
<span class="line"><span style="color:#61AFEF;">off</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 只解除点击事件</span></span>
<span class="line"><span style="color:#61AFEF;">off</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 解除事件委托</span></span>
<span class="line"><span style="color:#D19A66;">123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_4-2-3-事件处理-one-绑定一次性事件" tabindex="-1">4.2.3 事件处理 one() 绑定一次性事件 <a class="header-anchor" href="#_4-2-3-事件处理-one-绑定一次性事件" aria-label="Permalink to &quot;4.2.3 事件处理 one() 绑定一次性事件&quot;">​</a></h4><ul><li>语法规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">one</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">],</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>概述 <ul><li>为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。</li></ul></li><li>显示参数 <ul><li><code>type</code>:添加到元素的一个或多个事件。由空格分隔多个事件。必须是有效的事件。</li><li><code>data</code>:将要传递给事件处理函数的数据映射。</li><li><code>fn</code>:每当事件触发时执行的函数。</li></ul></li></ul><h4 id="_4-2-4-自动触发事件-trigger" tabindex="-1">4.2.4 自动触发事件 trigger() <a class="header-anchor" href="#_4-2-4-自动触发事件-trigger" aria-label="Permalink to &quot;4.2.4 自动触发事件 trigger()&quot;">​</a></h4><p>有些事件希望自动触发，比如轮播图自动播放功能与点击右侧按钮功能一致，可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 简写形式</span></span>
<span class="line"><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 自动触发形式</span></span>
<span class="line"><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">triggerHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 自动触发形式，不会触发元素的默认行为</span></span>
<span class="line"><span style="color:#D19A66;">123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-3-事件对象" tabindex="-1">4.3 事件对象 <a class="header-anchor" href="#_4-3-事件对象" aria-label="Permalink to &quot;4.3 事件对象&quot;">​</a></h3><p>事件被触发，就会有事件对象的产生。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">events</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">selector</span><span style="color:#ABB2BF;">],</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">even</span><span style="color:#ABB2BF;">) { })</span></span>
<span class="line"><span style="color:#E5C07B;">even</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 阻止默认行为 或者用 return false</span></span>
<span class="line"><span style="color:#E5C07B;">even</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stopPropagation</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 阻止冒泡</span></span>
<span class="line"><span style="color:#D19A66;">123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,226),p=[o];function t(r,c,i,u,d,B){return a(),n("div",null,p)}const F=s(e,[["render",t]]);export{b as __pageData,F as default};
