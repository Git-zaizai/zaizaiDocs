import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.d6ec958f.js";const d=JSON.parse('{"title":"一、简介","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/AJAX.md","filePath":"JavaScript/AJAX.md","lastUpdated":1697450441000}'),p={name:"JavaScript/AJAX.md"},e=l(`<h1 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">​</a></h1><p>AJAX全称为Asynchronous JavaScript And XML，就是异步的Js和XML。通过AJAX可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p><h1 id="二、ajax-的优缺点" tabindex="-1">二、Ajax 的优缺点 <a class="header-anchor" href="#二、ajax-的优缺点" aria-label="Permalink to &quot;二、Ajax 的优缺点&quot;">​</a></h1><h2 id="_1、优点" tabindex="-1">1、优点 <a class="header-anchor" href="#_1、优点" aria-label="Permalink to &quot;1、优点&quot;">​</a></h2><h3 id="_1-可以无需刷新页面而与服务器端进行通信。" tabindex="-1">① 可以无需刷新页面而与服务器端进行通信。 <a class="header-anchor" href="#_1-可以无需刷新页面而与服务器端进行通信。" aria-label="Permalink to &quot;① 可以无需刷新页面而与服务器端进行通信。&quot;">​</a></h3><h3 id="_2-允许你根据用户事件-鼠标、键盘、表单、文档-来更新部分页面内容。" tabindex="-1">② 允许你根据用户事件（鼠标、键盘、表单、文档）来更新部分页面内容。 <a class="header-anchor" href="#_2-允许你根据用户事件-鼠标、键盘、表单、文档-来更新部分页面内容。" aria-label="Permalink to &quot;② 允许你根据用户事件（鼠标、键盘、表单、文档）来更新部分页面内容。&quot;">​</a></h3><h2 id="_1、缺点" tabindex="-1">1、缺点 <a class="header-anchor" href="#_1、缺点" aria-label="Permalink to &quot;1、缺点&quot;">​</a></h2><h3 id="_1-没有浏览历史不能回退" tabindex="-1">① 没有浏览历史不能回退 <a class="header-anchor" href="#_1-没有浏览历史不能回退" aria-label="Permalink to &quot;① 没有浏览历史不能回退&quot;">​</a></h3><h3 id="_2-存在跨域问题-同源" tabindex="-1">② 存在跨域问题（同源） <a class="header-anchor" href="#_2-存在跨域问题-同源" aria-label="Permalink to &quot;② 存在跨域问题（同源）&quot;">​</a></h3><h3 id="_3-seo-搜索引擎-不友好" tabindex="-1">③ SEO（搜索引擎）不友好 <a class="header-anchor" href="#_3-seo-搜索引擎-不友好" aria-label="Permalink to &quot;③ SEO（搜索引擎）不友好&quot;">​</a></h3><h1 id="三、http请求" tabindex="-1">三、HTTP请求 <a class="header-anchor" href="#三、http请求" aria-label="Permalink to &quot;三、HTTP请求&quot;">​</a></h1><p>解释：HTTP (hypertext transport protocol)协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。</p><h2 id="_1、包含内容" tabindex="-1">1、包含内容 <a class="header-anchor" href="#_1、包含内容" aria-label="Permalink to &quot;1、包含内容&quot;">​</a></h2><h3 id="_1-请求报文" tabindex="-1">① 请求报文 <a class="header-anchor" href="#_1-请求报文" aria-label="Permalink to &quot;① 请求报文&quot;">​</a></h3><p>重点是格式与参数</p><ul><li>请求行（包含如下） <ul><li>请求类型：GET、POST、DELETE、PUT</li><li>URL：路径参数</li><li>HTTP版本：有1.0、1.1、2.0即 HTTP/1.1</li></ul></li><li>请求头 <ul><li>Host：请求将要发送到的服务器主机名和端口号</li><li>Cookie：是服务器发送到用户浏览器并保存在本地的一小块数据。 浏览器会存储cookie 并在下次向同一服务器再发起请求时携带并发送到服务器上。用于告知服务端两个请求是否来自同一浏览器——如保持用户的登录状态。</li><li>Content-Type：请求数据类型</li><li>User-agent：（例如：“Chrome 83”） <ul><li>1、统计用户浏览器使用情况。 有些浏览器说被多少人使用了，实际上就可以通过判断每个IP的UA来确定这个IP是用什么浏览器访问的，以得到使用量的数据。</li><li>2、根据用户使用浏览器的不同，显示不同的排版从而为用户提供更好的体验</li></ul></li></ul></li><li>请求空行</li><li>请求体：（可空，例如：“username=admin&amp;password=admin”） <ul><li>GET请求：内容为空</li><li>POST请求：可以不为空</li></ul></li></ul><h3 id="_2-响应报文" tabindex="-1">② 响应报文 <a class="header-anchor" href="#_2-响应报文" aria-label="Permalink to &quot;② 响应报文&quot;">​</a></h3><ul><li>响应行（包含如下） <ul><li>HTTP协议版本：有1.0、1.1、2.0即 HTTP/1.1</li><li>响应状态码：如：403、404、401、200、500、505等</li><li>响应字符串：如：OK</li></ul></li><li>响应头 <ul><li>Content-Type：请求数据类型（text/html; charset=utf-8）</li><li>Content-length：响应长度（2048）</li><li>Content-encoding：压缩方式（gzip）</li></ul></li><li>响应空行</li><li>响应体：JSON</li></ul><h1 id="四、ajax-基本使用" tabindex="-1">四、Ajax 基本使用 <a class="header-anchor" href="#四、ajax-基本使用" aria-label="Permalink to &quot;四、Ajax 基本使用&quot;">​</a></h1><h2 id="_1、get-请求" tabindex="-1">1、GET 请求 <a class="header-anchor" href="#_1、get-请求" aria-label="Permalink to &quot;1、GET 请求&quot;">​</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">&lt;button点击发送请求&lt;/button</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">&lt;div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;result&quot;</span><span style="color:#FFFFFF;">&lt;/div</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">&lt;script</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">获取元素</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">btn</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">document.getElementsByTagName(</span><span style="color:#FFFFFF;">&#39;button&#39;)[0];</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">result</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">document.getElementsByClassName(</span><span style="color:#FFFFFF;">&#39;result&#39;)[0]</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">绑定事件</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">btn.onclick</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">()</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.创建对象</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">XMLHttpRequest();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2.初始化</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">设置请求方法和url</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">xhr.open(</span><span style="color:#FFFFFF;">&#39;get&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">&#39;http://127.0.0.1:8000/server&#39;);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3.发送</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">xhr.send();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">/**</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4.事件绑定</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">处理服务端返回结果</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#D19A66;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">on</span><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">when</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">当……时候</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#D19A66;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">readystate</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">是</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">对象中的属性，表示状态</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#D19A66;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">change</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">改变</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#D19A66;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">**</span><span style="color:#FFFFFF;">/</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">xhr.onreadystatechange</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">()</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">判断</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#D19A66;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">(xhr.readyState</span><span style="color:#ABB2BF;"> =</span><span style="color:#FFFFFF;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">4)</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">判断响应状态码</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#D19A66;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">(xhr.status</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">200</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr.status</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">300)</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">处理结果</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#D19A66;">console.log(</span><span style="color:#FFFFFF;">&#39;xhr.status------&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr.status);</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">状态码</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#D19A66;">console.log(</span><span style="color:#FFFFFF;">&#39;xhr.statusText------&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr.statusText);</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">状态字符串</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#D19A66;">console.log(</span><span style="color:#FFFFFF;">&#39;xhr.getAllResponseHeaders------&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr.getAllResponseHeaders());</span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">所有响应头</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#D19A66;">console.log(</span><span style="color:#FFFFFF;">&#39;xhr.响应体------&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr.response);</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">响应体</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">设置</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">的文本</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#D19A66;">result.innerHTML</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">xhr.response</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#D19A66;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#D19A66;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">&lt;/script</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">&lt;/body</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h2 id="_2、post-请求" tabindex="-1">2、POST 请求 <a class="header-anchor" href="#_2、post-请求" aria-label="Permalink to &quot;2、POST 请求&quot;">​</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">获取元素</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">result</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">document.querySelector(</span><span style="color:#FFFFFF;">&#39;.result&#39;);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">绑定监听事件</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">result.addEventListener(</span><span style="color:#FFFFFF;">&#39;mouseover&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">(e)</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.创建对象</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">XMLHttpRequest();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2.初始化</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">设置</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">&#39;请求类型&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">与</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">&#39;URL&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">xhr.open(</span><span style="color:#FFFFFF;">&#39;POST&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">&#39;http://127.0.0.1:8000/server&#39;);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3.发送请求</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">xhr.send();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4.处理返回结果</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">xhr.onreadystatechange</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">()</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#D19A66;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">(xhr.readyState</span><span style="color:#ABB2BF;"> =</span><span style="color:#FFFFFF;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">4)</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#D19A66;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">(xhr.status</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">200</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr.status</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">300)</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#D19A66;">console.log(</span><span style="color:#FFFFFF;">&#39;xhr----&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr);</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#D19A66;">console.log(</span><span style="color:#FFFFFF;">&#39;xhr.response----&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr.response);</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#D19A66;">console.log(</span><span style="color:#FFFFFF;">&#39;xhr.responseURL----&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xhr.responseURL);</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#D19A66;">result.innerHTML</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">xhr.response;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#D19A66;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#D19A66;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">&lt;/script</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_1-post-添加请求体" tabindex="-1">① POST 添加请求体 <a class="header-anchor" href="#_1-post-添加请求体" aria-label="Permalink to &quot;① POST 添加请求体&quot;">​</a></h3><p><strong>send() 中</strong>可设置【任意类型】【任意数据】只要后端能处理</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 类型1</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;a=100&amp;b=200&amp;c=300&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 类型2</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;a:100&amp;b:200&amp;c:300&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 类型3</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;wqf&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 转换成 URL 传参格式（ name:wqf&amp;age:22）</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">urlParms</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">URLSearchParams</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">urlParms</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>node.js 中 使用 express.urlencoded 【解析】 并 接收</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.引入 express</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.创建应用对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 express.urlencoded() 中间件来解析 URL 编码的请求体</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">urlencoded</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">extended</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 express.json() 中间件来解析 JSON 请求体</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 3.创建路由规则</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @request：对请求报文的封装</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @response：对响应报文的封装</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/server&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 设置响应头  设置允许跨域</span></span>
<span class="line"><span style="color:#ABB2BF;">  response.setHeader(</span><span style="color:#98C379;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;*&#39;</span><span style="color:#E06C75;">);</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// 设置响应</span></span>
<span class="line"><span style="color:#E06C75;">  response.send(</span><span style="color:#98C379;">&#39;&lt;h1根目录默认GET请求成功&lt;/h1&#39;</span><span style="color:#E06C75;">);</span></span>
<span class="line"><span style="color:#E06C75;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">app.post(</span><span style="color:#98C379;">&#39;/server&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, response) = {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 设置响应头  设置允许跨域</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;*&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 打印请求中的参数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;request.body----&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 设置响应</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;h1根目录默认POST请求成功&lt;/h1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4.监听端口启动服务</span></span>
<span class="line"><span style="color:#ABB2BF;">app.listen(</span><span style="color:#D19A66;">8000</span><span style="color:#ABB2BF;">, () = {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;服务已启动……&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="_3、nodemon-自动重启工具" tabindex="-1">3、nodemon 自动重启工具 <a class="header-anchor" href="#_3、nodemon-自动重启工具" aria-label="Permalink to &quot;3、nodemon 自动重启工具&quot;">​</a></h2><p><a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="noreferrer">nodemon 安装官网</a></p><h3 id="_1-安装与使用" tabindex="-1">① 安装与使用 <a class="header-anchor" href="#_1-安装与使用" aria-label="Permalink to &quot;① 安装与使用&quot;">​</a></h3><div class="language-vb line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vb</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">npm </span><span style="color:#E06C75;">install</span><span style="color:#ABB2BF;"> -</span><span style="color:#E06C75;">g</span><span style="color:#ABB2BF;"> nodemon</span></span>
<span class="line"><span style="color:#ABB2BF;">nodemon app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="五、ajax-ie缓存问题" tabindex="-1">五、Ajax IE缓存问题 <a class="header-anchor" href="#五、ajax-ie缓存问题" aria-label="Permalink to &quot;五、Ajax IE缓存问题&quot;">​</a></h1><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在请求 URL 中加入 【时间戳】 让浏览器认为每次都是新的请求之后就不会走缓存 </span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`http://localhost:8000/ie?t=</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="六-、ajax-超时请求与异常处理" tabindex="-1">六 、Ajax 超时请求与异常处理 <a class="header-anchor" href="#六-、ajax-超时请求与异常处理" aria-label="Permalink to &quot;六 、Ajax 超时请求与异常处理&quot;">​</a></h1><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 超时设置 2s 设置</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">timeout</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置超时回调</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ontimeout</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;网络超时请重试&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h1 id="七、ajax-取消请求" tabindex="-1">七、Ajax 取消请求 <a class="header-anchor" href="#七、ajax-取消请求" aria-label="Permalink to &quot;七、Ajax 取消请求&quot;">​</a></h1><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;font-style:italic;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">btns</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">document.querySelectorAll(&#39;button&#39;);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;font-style:italic;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">document.querySelector(&#39;.result&#39;);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 创建公共 Ajax</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;font-style:italic;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">xhr;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#FFFFFF;">btns[0].addEventListener(&#39;click&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">()</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;http://localhost:8000/delay?t=&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onreadystatechange</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">if</span><span style="color:#ABB2BF;"> (xhr.readyState === 4) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xhr.response----&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">}</span><span style="color:#FFFFFF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// abort:终止请求/取消请求</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#FFFFFF;">btns[1].addEventListener(&#39;click&#39;,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">()</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abort</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">}</span><span style="color:#FFFFFF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">&lt;/script</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h1 id="九、同源策略" tabindex="-1">九、同源策略 <a class="header-anchor" href="#九、同源策略" aria-label="Permalink to &quot;九、同源策略&quot;">​</a></h1><h3 id="_1-解释【同源】与【跨域】" tabindex="-1">① 解释【同源】与【跨域】： <a class="header-anchor" href="#_1-解释【同源】与【跨域】" aria-label="Permalink to &quot;① 解释【同源】与【跨域】：&quot;">​</a></h3><ul><li>同源：协议、域名、端口号 必须完全相同</li><li>跨域：违背上述同源策略就是【跨域】</li></ul><h3 id="_2-jsonp-解决跨域-仅支持-get-请求" tabindex="-1">② JSONP 解决跨域（仅支持 GET 请求） <a class="header-anchor" href="#_2-jsonp-解决跨域-仅支持-get-请求" aria-label="Permalink to &quot;② JSONP 解决跨域（仅支持 GET 请求）&quot;">​</a></h3><ul><li>页面中默认拥有跨域能力的标签有： 【script】【img】【link】【iframe】</li><li>【JSONP】通过 【script】进行跨域</li></ul><h3 id="_3-cors-解决跨域-支持-get-post-delet-put" tabindex="-1">③ CORS 解决跨域（支持 GET POST DELET PUT ） <a class="header-anchor" href="#_3-cors-解决跨域-支持-get-post-delet-put" aria-label="Permalink to &quot;③ CORS 解决跨域（支持 GET POST DELET PUT ）&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noreferrer">官网看看</a></p><ul><li>CORS是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在**【服务器】**中进行处理。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有枚限访问哪些资源</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 设置响应头  设置允许跨域</span></span>
<span class="line"><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;*&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="封装库" tabindex="-1">封装库 <a class="header-anchor" href="#封装库" aria-label="Permalink to &quot;封装库&quot;">​</a></h2><p>近年来使用好用又多人用的库 Axios， 在jQuery的时候，jQusey.ajax是最方便的选择， 当然在当前有很多的封装库，选择一个用或者自己封装都可以， 如想了解百度一搜索就会有很多的资料学习。</p><h1 id="fetch" tabindex="-1">Fetch <a class="header-anchor" href="#fetch" aria-label="Permalink to &quot;Fetch&quot;">​</a></h1><p><code>fetch()</code>是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。浏览器原生提供这个对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noreferrer">mdn链接</a></p><h2 id="一、基本用法" tabindex="-1">一、基本用法 <a class="header-anchor" href="#一、基本用法" aria-label="Permalink to &quot;一、基本用法&quot;">​</a></h2><p><code>fetch()</code>的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。</p><p>（1）<code>fetch()</code>使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。</p><p>（2）<code>fetch()</code>采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。</p><p>（3）<code>fetch()</code>通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。XMLHTTPRequest 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来。</p><p>在用法上，<code>fetch()</code>接受一个 URL 字符串作为参数，默认向该网址发出 GET 请求，返回一个 Promise 对象。它的基本用法如下。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(...)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(...)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>下面是一个例子，从服务器获取 JSON 数据。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://api.github.com/users/ruanyf&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">json</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">json</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Request Failed&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面示例中，<code>fetch()</code>接收到的<code>response</code>是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API" target="_blank" rel="noreferrer">Stream 对象</a>，<code>response.json()</code>是一个异步操作，取出所有内容，并将其转为 JSON 对象。</p><p>Promise 可以使用 await 语法改写，使得语义更清晰。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getJSON</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;https://api.github.com/users/ruanyf&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Request Failed&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面示例中，<code>await</code>语句必须放在<code>try...catch</code>里面，这样才能捕捉异步操作中可能发生的错误。</p><p>后文都采用<code>await</code>的写法，不使用<code>.then()</code>的写法。</p><h2 id="二、response-对象-处理-http-回应" tabindex="-1">二、Response 对象：处理 HTTP 回应 <a class="header-anchor" href="#二、response-对象-处理-http-回应" aria-label="Permalink to &quot;二、Response 对象：处理 HTTP 回应&quot;">​</a></h2><h3 id="_2-1-response-对象的同步属性" tabindex="-1">2.1 Response 对象的同步属性 <a class="header-anchor" href="#_2-1-response-对象的同步属性" aria-label="Permalink to &quot;2.1 Response 对象的同步属性&quot;">​</a></h3><p><code>fetch()</code>请求成功以后，得到的是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response" target="_blank" rel="noreferrer">Response 对象</a>。它对应服务器的 HTTP 回应。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>前面说过，Response 包含的数据通过 Stream 接口异步读取，但是它还包含一些同步属性，对应 HTTP 回应的标头信息（Headers），可以立即读取。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetchText</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/readme.txt&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">statusText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面示例中，<code>response.status</code>和<code>response.statusText</code>就是 Response 的同步属性，可以立即读取。</p><p>标头信息属性有下面这些。</p><p><strong>Response.ok</strong></p><p><code>Response.ok</code>属性返回一个布尔值，表示请求是否成功，<code>true</code>对应 HTTP 请求的状态码 200 到 299，<code>false</code>对应其他的状态码。</p><p><strong>Response.status</strong></p><p><code>Response.status</code>属性返回一个数字，表示 HTTP 回应的状态码（例如200，表示成功请求）。</p><p><strong>Response.statusText</strong></p><p><code>Response.statusText</code>属性返回一个字符串，表示 HTTP 回应的状态信息（例如请求成功以后，服务器返回&quot;OK&quot;）。</p><p><strong>Response.url</strong></p><p><code>Response.url</code>属性返回请求的 URL。如果 URL 存在跳转，该属性返回的是最终 URL。</p><p><strong>Response.type</strong></p><p><code>Response.type</code>属性返回请求的类型。可能的值如下：</p><ul><li><code>basic</code>：普通请求，即同源请求。</li><li><code>cors</code>：跨域请求。</li><li><code>error</code>：网络错误，主要用于 Service Worker。</li><li><code>opaque</code>：如果<code>fetch()</code>请求的<code>type</code>属性设为<code>no-cors</code>，就会返回这个值，详见请求部分。表示发出的是简单的跨域请求，类似<code>&lt;form</code>表单的那种跨域请求。</li><li><code>opaqueredirect</code>：如果<code>fetch()</code>请求的<code>redirect</code>属性设为<code>manual</code>，就会返回这个值，详见请求部分。</li></ul><p><strong>Response.redirected</strong></p><p><code>Response.redirected</code>属性返回一个布尔值，表示请求是否发生过跳转。</p><h3 id="_2-2-判断请求是否成功" tabindex="-1">2.2 判断请求是否成功 <a class="header-anchor" href="#_2-2-判断请求是否成功" aria-label="Permalink to &quot;2.2 判断请求是否成功&quot;">​</a></h3><p><code>fetch()</code>发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，<code>fetch()</code>才会报错，其他情况都不会报错，而是认为请求成功。</p><p>这就是说，即使服务器返回的状态码是 4xx 或 5xx，<code>fetch()</code>也不会报错（即 Promise 不会变为 <code>rejected</code>状态）。</p><p>只有通过<code>Response.status</code>属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。请看下面的例子。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetchText</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/readme.txt&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">statusText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面示例中，<code>response.status</code>属性只有等于 2xx （200~299），才能认定请求成功。这里不用考虑网址跳转（状态码为 3xx），因为<code>fetch()</code>会将跳转的状态码自动转为 200。</p><p>另一种方法是判断<code>response.ok</code>是否为<code>true</code>。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 请求成功</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 请求失败</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-3-response-headers-属性" tabindex="-1">2.3 Response.headers 属性 <a class="header-anchor" href="#_2-3-response-headers-属性" aria-label="Permalink to &quot;2.3 Response.headers 属性&quot;">​</a></h3><p>Response 对象还有一个<code>Response.headers</code>属性，指向一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers" target="_blank" rel="noreferrer">Headers 对象</a>，对应 HTTP 回应的所有标头。 Headers 对象可以使用<code>for...of</code>循环进行遍历。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">headers</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> : </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);  </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或者</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">()) { </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> : </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);  </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Headers 对象提供了以下方法，用来操作标头。</p><ul><li><code>Headers.get()</code>：根据指定的键名，返回键值。</li><li><code>Headers.has()</code>： 返回一个布尔值，表示是否包含某个标头。</li><li><code>Headers.set()</code>：将指定的键名设置为新的键值，如果该键名不存在则会添加。</li><li><code>Headers.append()</code>：添加标头。</li><li><code>Headers.delete()</code>：删除标头。</li><li><code>Headers.keys()</code>：返回一个遍历器，可以依次遍历所有键名。</li><li><code>Headers.values()</code>：返回一个遍历器，可以依次遍历所有键值。</li><li><code>Headers.entries()</code>：返回一个遍历器，可以依次遍历所有键值对（<code>[key, value]</code>）。</li><li><code>Headers.forEach()</code>：依次遍历标头，每个标头都会执行一次参数函数。</li></ul><p>上面的有些方法可以修改标头，那是因为继承自 Headers 接口。对于 HTTP 回应来说，修改标头意义不大，况且很多标头是只读的，浏览器不允许修改。</p><p>这些方法中，最常用的是<code>response.headers.get()</code>，用于读取某个标头的值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);  </span></span>
<span class="line"><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Content-Type&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// application/json; charset=utf-8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>Headers.keys()</code>和<code>Headers.values()</code>方法用来分别遍历标头的键名和键值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 键名</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myHeaders</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 键值</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myHeaders</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">values</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>Headers.forEach()</code>方法也可以遍历所有的键值和键名。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;:&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-4-读取内容的方法" tabindex="-1">2.4 读取内容的方法 <a class="header-anchor" href="#_2-4-读取内容的方法" aria-label="Permalink to &quot;2.4 读取内容的方法&quot;">​</a></h3><p><code>Response</code>对象根据服务器返回的不同类型的数据，提供了不同的读取方法。</p><ul><li><code>response.text()</code>：得到文本字符串。</li><li><code>response.json()</code>：得到 JSON 对象。</li><li><code>response.blob()</code>：得到二进制 Blob 对象。</li><li><code>response.formData()</code>：得到 FormData 表单对象。</li><li><code>response.arrayBuffer()</code>：得到二进制 ArrayBuffer 对象。</li></ul><p>上面5个读取方法都是异步的，返回的都是 Promise 对象。必须等到异步操作结束，才能得到服务器返回的完整数据。</p><p><strong>response.text()</strong></p><p><code>response.text()</code>可以用于获取文本数据，比如 HTML 文件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/users.html&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">body</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>response.json()</strong></p><p><code>response.json()</code>主要用于获取服务器返回的 JSON 数据，前面已经举过例子了。</p><p><strong>response.formData()</strong></p><p><code>response.formData()</code>主要用在 Service Worker 里面，拦截用户提交的表单，修改某些数据以后，再提交给服务器。</p><p><strong>response.blob()</strong></p><p><code>response.blob()</code>用于获取二进制文件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;flower.jpg&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myBlob</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">blob</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">objectURL</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myBlob</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myImage</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;img&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">myImage</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">objectURL</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面示例读取图片文件<code>flower.jpg</code>，显示在网页上。</p><p><strong>response.arrayBuffer()</strong></p><p><code>response.arrayBuffer()</code>主要用于获取流媒体文件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">audioCtx</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">AudioContext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">source</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">audioCtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createBufferSource</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;song.ogg&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">buffer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arrayBuffer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">decodeData</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">audioCtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">decodeAudioData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">buffer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">source</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">buffer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">buffer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">source</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">audioCtx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">destination</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">source</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loop</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面示例是<code>response.arrayBuffer()</code>获取音频文件<code>song.ogg</code>，然后在线播放的例子。</p><h3 id="_2-5-response-clone" tabindex="-1">2.5 Response.clone() <a class="header-anchor" href="#_2-5-response-clone" aria-label="Permalink to &quot;2.5 Response.clone()&quot;">​</a></h3><p>Stream 对象只能读取一次，读取完就没了。这意味着，前一节的五个读取方法，只能使用一个，否则会报错。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">json</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面示例先使用了<code>response.text()</code>，就把 Stream 读完了。后面再调用<code>response.json()</code>，就没有内容可读了，所以报错。</p><p>Response 对象提供<code>Response.clone()</code>方法，创建<code>Response</code>对象的副本，实现多次读取。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;flowers.jpg&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myBlob1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">blob</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myBlob2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">blob</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">image1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myBlob1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">image2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myBlob2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面示例中，<code>response.clone()</code>复制了一份 Response 对象，然后将同一张图片读取了两次。</p><p>Response 对象还有一个<code>Response.redirect()</code>方法，用于将 Response 结果重定向到指定的 URL。该方法一般只用在 Service Worker 里面，这里就不介绍了。</p><h3 id="_2-6-response-body-属性" tabindex="-1">2.6 Response.body 属性 <a class="header-anchor" href="#_2-6-response-body-属性" aria-label="Permalink to &quot;2.6 Response.body 属性&quot;">​</a></h3><p><code>Response.body</code>属性是 Response 对象暴露出的底层接口，返回一个 ReadableStream 对象，供用户操作。</p><p>它可以用来分块读取内容，应用之一就是显示下载的进度。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;flower.jpg&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reader</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getReader</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">done</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Received </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> bytes\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上面示例中，<code>response.body.getReader()</code>方法返回一个遍历器。这个遍历器的<code>read()</code>方法每次返回一个对象，表示本次读取的内容块。</p><p>这个对象的<code>done</code>属性是一个布尔值，用来判断有没有读完；<code>value</code>属性是一个 arrayBuffer 数组，表示内容块的内容，而<code>value.length</code>属性是当前块的大小。</p><h2 id="三、fetch-的第二个参数-定制-http-请求" tabindex="-1">三、<code>fetch()</code>的第二个参数：定制 HTTP 请求 <a class="header-anchor" href="#三、fetch-的第二个参数-定制-http-请求" aria-label="Permalink to &quot;三、\`fetch()\`的第二个参数：定制 HTTP 请求&quot;">​</a></h2><p><code>fetch()</code>的第一个参数是 URL，还可以接受第二个参数，作为配置对象，定制发出的 HTTP 请求。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">optionObj</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面命令的<code>optionObj</code>就是第二个参数。</p><p>HTTP 请求的方法、标头、数据体都在这个对象里面设置。下面是一些示例。</p><p><strong>（1）POST 请求</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;Content-type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;foo=bar&amp;lorem=ipsum&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">json</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面示例中，配置对象用到了三个属性。</p><ul><li><code>method</code>：HTTP 请求的方法，<code>POST</code>、<code>DELETE</code>、<code>PUT</code>都在这个属性设置。</li><li><code>headers</code>：一个对象，用来定制 HTTP 请求的标头。</li><li><code>body</code>：POST 请求的数据体。</li></ul><p>注意，有些标头不能通过<code>headers</code>属性设置，比如<code>Content-Length</code>、<code>Cookie</code>、<code>Host</code>等等。它们是由浏览器自动生成，无法修改。</p><p><strong>（2）提交 JSON 数据</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:  </span><span style="color:#98C379;">&#39;John&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">surname</span><span style="color:#ABB2BF;">:  </span><span style="color:#98C379;">&#39;Smith&#39;</span><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/article/fetch/post/user&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">&#39;Content-Type&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;application/json;charset=utf-8&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面示例中，标头<code>Content-Type</code>要设成<code>&#39;application/json;charset=utf-8&#39;</code>。因为默认发送的是纯文本，<code>Content-Type</code>的默认值是<code>&#39;text/plain;charset=UTF-8&#39;</code>。</p><p><strong>（3）提交表单</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">form</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;form&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/users&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">FormData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>（4）文件上传</strong></p><p>如果表单里面有文件选择器，可以用前一个例子的写法，上传的文件包含在整个表单里面，一起提交。</p><p>另一种方法是用脚本添加文件，构造出一个表单，进行上传，请看下面的例子。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;input[type=&quot;file&quot;]&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">FormData</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;file&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">input</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">files</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/avatars&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">data</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上传二进制文件时，不用修改标头的<code>Content-Type</code>，浏览器会自动设置。</p><p><strong>（5）直接上传二进制数据</strong></p><p><code>fetch()</code>也可以直接上传二进制数据，将 Blob 或 arrayBuffer 数据放在<code>body</code>属性里面。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">blob</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">   </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">canvasElem</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toBlob</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">,  </span><span style="color:#98C379;">&#39;image/png&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/article/fetch/post/image&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">:  </span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">blob</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="四、fetch-配置对象的完整-api" tabindex="-1">四、<code>fetch()</code>配置对象的完整 API <a class="header-anchor" href="#四、fetch-配置对象的完整-api" aria-label="Permalink to &quot;四、\`fetch()\`配置对象的完整 API&quot;">​</a></h2><p><code>fetch()</code>第二个参数的完整 API 如下。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;GET&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;text/plain;charset=UTF-8&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">referrer</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;about:client&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">referrerPolicy</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;no-referrer-when-downgrade&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cors&quot;</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">credentials</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;same-origin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;default&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">redirect</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;follow&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">integrity</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">keepalive</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">signal</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>fetch()</code>请求的底层用的是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/Request" target="_blank" rel="noreferrer">Request() 对象</a>的接口，参数完全一样，因此上面的 API 也是<code>Request()</code>的 API。</p><p>这些属性里面，<code>headers</code>、<code>body</code>、<code>method</code>前面已经给过示例了，下面是其他属性的介绍。</p><p><strong>cache</strong></p><p><code>cache</code>属性指定如何处理缓存。可能的取值如下：</p><ul><li><code>default</code>：默认值，先在缓存里面寻找匹配的请求。</li><li><code>no-store</code>：直接请求远程服务器，并且不更新缓存。</li><li><code>reload</code>：直接请求远程服务器，并且更新缓存。</li><li><code>no-cache</code>：将服务器资源跟本地缓存进行比较，有新的版本才使用服务器资源，否则使用缓存。</li><li><code>force-cache</code>：缓存优先，只有不存在缓存的情况下，才请求远程服务器。</li><li><code>only-if-cached</code>：只检查缓存，如果缓存里面不存在，将返回504错误。</li></ul><p><strong>mode</strong></p><p><code>mode</code>属性指定请求的模式。可能的取值如下：</p><ul><li><code>cors</code>：默认值，允许跨域请求。</li><li><code>same-origin</code>：只允许同源请求。</li><li><code>no-cors</code>：请求方法只限于 GET、POST 和 HEAD，并且只能使用有限的几个简单标头，不能添加跨域的复杂标头，相当于提交表单所能发出的请求。</li></ul><p><strong>credentials</strong></p><p><code>credentials</code>属性指定是否发送 Cookie。可能的取值如下：</p><ul><li><code>same-origin</code>：默认值，同源请求时发送 Cookie，跨域请求时不发送。</li><li><code>include</code>：不管同源请求，还是跨域请求，一律发送 Cookie。</li><li><code>omit</code>：一律不发送。</li></ul><p>跨域请求发送 Cookie，需要将<code>credentials</code>属性设为<code>include</code>。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://another.com&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">credentials</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;include&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>signal</strong></p><p><code>signal</code>属性指定一个 AbortSignal 实例，用于取消<code>fetch()</code>请求，详见下一节。</p><p><strong>keepalive</strong></p><p><code>keepalive</code>属性用于页面卸载时，告诉浏览器在后台保持连接，继续发送数据。</p><p>一个典型的场景就是，用户离开网页时，脚本向服务器提交一些用户行为的统计信息。这时，如果不用<code>keepalive</code>属性，数据可能无法发送，因为浏览器已经把页面卸载了。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onunload</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/analytics&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;statistics&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">keepalive</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>redirect</strong></p><p><code>redirect</code>属性指定 HTTP 跳转的处理方法。可能的取值如下：</p><ul><li><code>follow</code>：默认值，<code>fetch()</code>跟随 HTTP 跳转。</li><li><code>error</code>：如果发生跳转，<code>fetch()</code>就报错。</li><li><code>manual</code>：<code>fetch()</code>不跟随 HTTP 跳转，但是<code>response.url</code>属性会指向新的 URL，<code>response.redirected</code>属性会变为<code>true</code>，由开发者自己决定后续如何处理跳转。</li></ul><p><strong>integrity</strong></p><p><code>integrity</code>属性指定一个哈希值，用于检查 HTTP 回应传回的数据是否等于这个预先设定的哈希值。</p><p>比如，下载文件时，检查文件的 SHA-256 哈希值是否相符，确保没有被篡改。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://site.com/file&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">integrity</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;sha256-abcdef&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>referrer</strong></p><p><code>referrer</code>属性用于设定<code>fetch()</code>请求的<code>referer</code>标头。</p><p>这个属性可以为任意字符串，也可以设为空字符串（即不发送<code>referer</code>标头）。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/page&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">referrer</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>referrerPolicy</strong></p><p><code>referrerPolicy</code>属性用于设定<code>Referer</code>标头的规则。可能的取值如下：</p><ul><li><code>no-referrer-when-downgrade</code>：默认值，总是发送<code>Referer</code>标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li><li><code>no-referrer</code>：不发送<code>Referer</code>标头。</li><li><code>origin</code>：<code>Referer</code>标头只包含域名，不包含完整的路径。</li><li><code>origin-when-cross-origin</code>：同源请求<code>Referer</code>标头包含完整的路径，跨域请求只包含域名。</li><li><code>same-origin</code>：跨域请求不发送<code>Referer</code>，同源请求发送。</li><li><code>strict-origin</code>：<code>Referer</code>标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送<code>Referer</code>标头。</li><li><code>strict-origin-when-cross-origin</code>：同源请求时<code>Referer</code>标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。</li><li><code>unsafe-url</code>：不管什么情况，总是发送<code>Referer</code>标头。</li></ul><h2 id="五、取消fetch-请求" tabindex="-1">五、取消<code>fetch()</code>请求 <a class="header-anchor" href="#五、取消fetch-请求" aria-label="Permalink to &quot;五、取消\`fetch()\`请求&quot;">​</a></h2><p><code>fetch()</code>请求发送以后，如果中途想要取消，需要使用<code>AbortController</code>对象。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">controller</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">AbortController</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">signal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">signal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">signal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">signal</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">signal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;abort&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  () </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;abort!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abort</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 取消</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">signal</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">aborted</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>上面示例中，首先新建 AbortController 实例，然后发送<code>fetch()</code>请求，配置对象的<code>signal</code>属性必须指定接收 AbortController 实例发送的信号<code>controller.signal</code>。</p><p><code>controller.abort()</code>方法用于发出取消信号。这时会触发<code>abort</code>事件，这个事件可以监听，也可以通过<code>controller.signal.aborted</code>属性判断取消信号是否已经发出。</p><p>下面是一个1秒后自动取消请求的例子。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">controller</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">AbortController</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abort</span><span style="color:#ABB2BF;">(), </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/long-operation&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">signal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">signal</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;AbortError&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Aborted!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="六、参考链接" tabindex="-1">六、参考链接 <a class="header-anchor" href="#六、参考链接" aria-label="Permalink to &quot;六、参考链接&quot;">​</a></h2><ul><li><a href="https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html" target="_blank" rel="noreferrer">阮一峰 Fetch API 教程</a></li><li><a href="https://javascript.info/fetch" target="_blank" rel="noreferrer">Network requests: Fetch</a></li><li><a href="https://github.com/node-fetch/node-fetch" target="_blank" rel="noreferrer">node-fetch</a></li><li><a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" target="_blank" rel="noreferrer">Introduction to fetch()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noreferrer">Using Fetch</a></li><li><a href="https://developerhowto.com/2019/09/14/javascript-fetch-api/" target="_blank" rel="noreferrer">Javascript Fetch API: The XMLHttpRequest evolution</a></li></ul>`,208),o=[e];function r(c,t,B,y,i,F){return n(),a("div",null,o)}const b=s(p,[["render",r]]);export{d as __pageData,b as default};
