import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8218e65d.js";const A=JSON.parse('{"title":"第 1 章 ECMASript 相关介绍","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/es6-11.md","filePath":"JavaScript/es6-11.md","lastUpdated":1711379191000}'),p={name:"JavaScript/es6-11.md"},o=l(`<h1 id="第-1-章-ecmasript-相关介绍" tabindex="-1">第 1 章 ECMASript 相关介绍 <a class="header-anchor" href="#第-1-章-ecmasript-相关介绍" aria-label="Permalink to &quot;第 1 章 ECMASript 相关介绍&quot;">​</a></h1><h2 id="_1-1-什么是-ecma" tabindex="-1">1.1. 什么是 ECMA <a class="header-anchor" href="#_1-1-什么是-ecma" aria-label="Permalink to &quot;1.1. 什么是 ECMA&quot;">​</a></h2><p>ECMA（European Computer Manufacturers Association）中文名称为欧洲计算机制造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该组织改名为 Ecma 国际。</p><h2 id="_1-2-什么是-ecmascript" tabindex="-1">1.2. 什么是 ECMAScript <a class="header-anchor" href="#_1-2-什么是-ecmascript" aria-label="Permalink to &quot;1.2. 什么是 ECMAScript&quot;">​</a></h2><p>ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言。 1.3. 什么是 ECMA-262 Ecma 国际制定了许多标准，而 ECMA-262 只是其中的一个，所有标准列表查看 <a href="http://www.ecma-international.org/publications/standards/Standard.htm" target="_blank" rel="noreferrer">http://www.ecma-international.org/publications/standards/Standard.htm</a></p><h2 id="_1-4-ecma-262-历史" tabindex="-1">1.4. ECMA-262 历史 <a class="header-anchor" href="#_1-4-ecma-262-历史" aria-label="Permalink to &quot;1.4. ECMA-262 历史&quot;">​</a></h2><p>ECMA-262（ECMAScript）历史版本查看网址 <a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm" target="_blank" rel="noreferrer">http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm</a></p><table><thead><tr><th>第 1 版</th><th>1997 年</th><th>制定了语言的基本语法</th></tr></thead><tbody><tr><td>第 2 版</td><td>1998 年</td><td>较小改动</td></tr><tr><td>第 3 版</td><td>1999 年</td><td>引入正则、异常处理、格式化输出等。IE 开始支持</td></tr><tr><td>第 4 版</td><td>2007 年</td><td>过于激进，未发布</td></tr><tr><td>第 5 版</td><td>2009 年</td><td>引入严格模式、JSON，扩展对象、数组、原型、字符串、日期方法</td></tr><tr><td>第 6 版</td><td>2015 年</td><td>模块化、面向对象语法、Promise、箭头函数、let、const、数组解构赋值等等</td></tr><tr><td>第 7 版</td><td>2016 年</td><td>幂运算符、数组扩展、Async/await 关键字</td></tr><tr><td>第 8 版</td><td>2017 年</td><td>Async/await、字符串扩展</td></tr><tr><td>第 9 版</td><td>2018 年</td><td>对象解构赋值、正则扩展</td></tr><tr><td>第 10 版</td><td>2019 年</td><td>扩展对象、数组方法</td></tr><tr><td>ES.next</td><td>动态指向下一个版本</td><td></td></tr></tbody></table><p>注：从 ES6 开始，每年发布一个版本，版本号比年份最后一位大 1</p><h2 id="_1-5-谁在维护-ecma-262" tabindex="-1">1.5. 谁在维护 ECMA-262 <a class="header-anchor" href="#_1-5-谁在维护-ecma-262" aria-label="Permalink to &quot;1.5. 谁在维护 ECMA-262&quot;">​</a></h2><p>TC39（Technical Committee 39）是推进 ECMAScript 发展的委员会。其会员都是公司（其中主要是浏览器厂商，有苹果、谷歌、微软、因特尔等）。TC39 定期召开会议，会议由会员公司的代表与特邀专家出席</p><h2 id="_1-6-为什么要学习-es6" tabindex="-1">1.6. 为什么要学习 ES6 <a class="header-anchor" href="#_1-6-为什么要学习-es6" aria-label="Permalink to &quot;1.6. 为什么要学习 ES6&quot;">​</a></h2><p>ES6 的版本变动内容最多，具有里程碑意义 ES6 加入许多新的语法特性，编程实现更简单、高效 ES6 是前端发展趋势，就业必备技能</p><h2 id="_1-7-es6-兼容性" tabindex="-1">1.7. ES6 兼容性 <a class="header-anchor" href="#_1-7-es6-兼容性" aria-label="Permalink to &quot;1.7. ES6 兼容性&quot;">​</a></h2><p><a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noreferrer">http://kangax.github.io/compat-table/es6/ </a>可查看兼容性</p><h1 id="第-2-章-ecmasript-6-新特性" tabindex="-1">第 2 章 ECMASript 6 新特性 <a class="header-anchor" href="#第-2-章-ecmasript-6-新特性" aria-label="Permalink to &quot;第 2 章 ECMASript 6 新特性&quot;">​</a></h1><h2 id="_2-1-let-关键字" tabindex="-1">2.1. let 关键字 <a class="header-anchor" href="#_2-1-let-关键字" aria-label="Permalink to &quot;2.1. let 关键字&quot;">​</a></h2><ul><li>let 关键字用来声明变量，使用 let 声明的变量有几个特点： <ol><li>不允许重复声明</li><li>块儿级作用域</li><li>不存在变量提升</li><li>不影响作用域链</li></ol></li></ul><p>应用场景：以后声明变量使用 let 就对了</p><h2 id="_2-2-const-关键字" tabindex="-1">2.2. const 关键字 <a class="header-anchor" href="#_2-2-const-关键字" aria-label="Permalink to &quot;2.2. const 关键字&quot;">​</a></h2><ul><li>const 关键字用来声明常量，const 声明有以下特点 <ol><li>声明必须赋初始值</li><li>标识符一般为大写</li><li>不允许重复声明</li><li>值不允许修改</li><li>块儿级作用域</li></ol></li></ul><p>注意: 对象属性修改和数组元素变化不会出发 const 错误 应用场景：声明对象类型使用 const，非对象类型声明选择 let</p><h2 id="_2-3-变量的解构赋值" tabindex="-1">2.3.变量的解构赋值 <a class="header-anchor" href="#_2-3-变量的解构赋值" aria-label="Permalink to &quot;2.3.变量的解构赋值&quot;">​</a></h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//数组的解构赋值</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;张学友&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;刘德华&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;黎明&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;郭富城&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">zhang</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">liu</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">guo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//对象的解构赋值</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">lin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;林志颖&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">tags</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;车手&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;歌手&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;小旋风&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;演员&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tags</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">lin</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//复杂解构</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">wangfei</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;王菲&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">songs</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;红豆&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;流年&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;暧昧&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;传奇&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;窦唯&#39;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;李亚鹏&#39;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;谢霆锋&#39;</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">songs</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">one</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">two</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">three</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">second</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">third</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">wangfei</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</p><h2 id="_2-4-模板字符串" tabindex="-1">2.4.模板字符串 <a class="header-anchor" href="#_2-4-模板字符串" aria-label="Permalink to &quot;2.4.模板字符串&quot;">​</a></h2><ul><li>模板字符串（template string）是增强版的字符串，用反引号（\`）标识，特点： <ol><li>字符串中可以出现换行符</li><li>可以使用 \${xxx} 形式输出变量</li></ol></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义字符串</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;li&gt;沈腾&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;li&gt;玛丽&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;li&gt;魏翔&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;li&gt;艾伦&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">&lt;/ul&gt;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 变量拼接</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">star</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;王宁&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">star</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">在前几年离开了开心麻花\`</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>注意：当遇到字符串与变量拼接的情况使用模板字符串</p><h2 id="_2-5-简化对象写法" tabindex="-1">2.5.简化对象写法 <a class="header-anchor" href="#_2-5-简化对象写法" aria-label="Permalink to &quot;2.5.简化对象写法&quot;">​</a></h2><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;尚硅谷&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">slogon</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;永远追求行业更高标准&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">improve</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;可以提高你的技能&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//属性和方法简写</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">atguigu</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">slogon</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">improve</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">change</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;可以改变你&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>注意：对象简写形式简化了代码，所以以后用简写就对了</p><h2 id="_2-6-箭头函数" tabindex="-1">2.6.箭头函数 <a class="header-anchor" href="#_2-6-箭头函数" aria-label="Permalink to &quot;2.6.箭头函数&quot;">​</a></h2><p>ES6 允许使用「箭头」（=&gt;）定义函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 1. 通用写法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arg1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arg2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arg3</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arg1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arg2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arg3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>箭头函数的注意点: <ol><li>如果形参只有一个，则小括号可以省略</li><li>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果</li><li>箭头函数 this 指向声明时所在作用域下 this 的值</li><li>箭头函数不能作为构造函数实例化</li><li>不能使用 arguments</li></ol></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 2. 省略小括号的情况</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 3. 省略花括号的情况</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">score</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 4. this 指向声明时所在作用域中 this 的值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn4</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">school</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;尚硅谷&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn5</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">fn5</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>注意：箭头函数不会更改 this 指向，用来指定回调函数会非常合适</p><h2 id="_2-7-rest-参数" tabindex="-1">2.7. rest 参数 <a class="header-anchor" href="#_2-7-rest-参数" aria-label="Permalink to &quot;2.7. rest 参数&quot;">​</a></h2><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 作用与 arguments 类似</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [ 1, 2, 3, 4, 5 ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * rest 参数必须是最后一个形参</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">minus</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 100 1 [ 2, 3, 4, 5, 19 ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">minus</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">19</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>注意：rest 参数非常适合不定个数参数函数的场景</p><h2 id="_2-8-spread-扩展运算符-扩展运算符" tabindex="-1">2.8. spread 扩展运算符(...扩展运算符) <a class="header-anchor" href="#_2-8-spread-扩展运算符-扩展运算符" aria-label="Permalink to &quot;2.8. spread 扩展运算符(...扩展运算符)&quot;">​</a></h2><p>扩展运算符（spread）也是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 展开数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tfboys</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;德玛西亚之力&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;德玛西亚之翼&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;德玛西亚皇子&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { &#39;0&#39;: &#39;德玛西亚之力&#39;, &#39;1&#39;: &#39;德玛西亚之翼&#39;, &#39;2&#39;: &#39;德玛西亚皇子&#39; }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">tfboys</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 展开对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">skillOne</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">q</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;致命打击&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">skillTwo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">w</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;勇气&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">skillThree</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;审判&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">skillFour</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;德玛西亚正义&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">gailun</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">skillOne</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">skillTwo</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">skillThree</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">skillFour</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">gailun</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { q: &#39;致命打击&#39;, w: &#39;勇气&#39;, e: &#39;审判&#39;, r: &#39;德玛西亚正义&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="_2-9-symbol" tabindex="-1">2.9. Symbol <a class="header-anchor" href="#_2-9-symbol" aria-label="Permalink to &quot;2.9. Symbol&quot;">​</a></h2><h3 id="_2-9-1-symbol-基本使用" tabindex="-1">2.9.1. Symbol 基本使用 <a class="header-anchor" href="#_2-9-1-symbol-基本使用" aria-label="Permalink to &quot;2.9.1. Symbol 基本使用&quot;">​</a></h3><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。 Symbol 特点：</p><ol><li>Symbol 的值是唯一的，用来解决命名冲突的问题</li><li>Symbol 值不能与其他数据进行运算</li><li>Symbol 定义的对象属性不能使用 for…in 循环遍历，但是可以使用 Reflect.ownKeys 来获取对象的所有键名</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//创建 Symbol</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//添加标识的 Symbol</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;尚硅谷&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s2_2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;尚硅谷&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s2_2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使用 Symbol for 定义</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;尚硅谷&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s3_2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;尚硅谷&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s3_2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>注: 遇到唯一性的场景时要想到 Symbol</p><h3 id="_2-9-2-symbol-内置值" tabindex="-1">2.9.2. Symbol 内置值 <a class="header-anchor" href="#_2-9-2-symbol-内置值" aria-label="Permalink to &quot;2.9.2. Symbol 内置值&quot;">​</a></h3><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行。</p><table><thead><tr><th>Symbol.hasInstance</th><th>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</th></tr></thead><tbody><tr><td>Symbol.isConcatSpreadable</td><td>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开。</td></tr><tr><td>Symbol.species</td><td>创建衍生对象时，会使用该属性</td></tr><tr><td>Symbol.match</td><td>当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</td></tr><tr><td>Symbol.replace</td><td>当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.search</td><td>当该对象被 str. search (myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.split</td><td>当该对象被 str. split (myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.iterator</td><td>对象进行 for...of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</td></tr><tr><td>Symbol.toPrimitive</td><td>该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</td></tr><tr><td>Symbol. toStringTag</td><td>在该对象上面调用 toString 方法时，返回该方法的返回值</td></tr><tr><td>Symbol. unscopables</td><td>该对象指定了使用 with 关键字时，哪些属性会被 with 环境排除。</td></tr></tbody></table><h2 id="_2-10-迭代器" tabindex="-1">2.10. 迭代器 <a class="header-anchor" href="#_2-10-迭代器" aria-label="Permalink to &quot;2.10. 迭代器&quot;">​</a></h2><p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。</p><ol><li>ES6 创造了一种新的遍历命令 for...of 循环，Iterator 接口主要供 for...of 消费</li><li>原生具备 iterator 接口的数据(可用 for of 遍历) <ol><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypedArray</li><li>NodeList</li></ol></li><li>工作原理 <ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用 next 方法返回一个包含 value 和 done 属性的对象</li></ol></li></ol><p>注: 需要自定义遍历数据的时候，要想到迭代器。</p><h2 id="_2-11-生成器" tabindex="-1">2.11. 生成器 <a class="header-anchor" href="#_2-11-生成器" aria-label="Permalink to &quot;2.11. 生成器&quot;">​</a></h2><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">gen</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;一只没有耳朵&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;一只没有尾巴&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;真奇怪&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">gen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// { value: &#39;一只没有耳朵&#39;, done: false }</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// { value: &#39;一只没有尾巴&#39;, done: false }</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// { value: &#39;真奇怪&#39;, done: true }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>代码说明：</p><ol><li><ul><li>的位置没有限制</li></ul></li><li>生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到 yield 语句后的值</li><li>yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next 方法，执行一段代码</li><li>next 方法可以传递实参，作为 yield 语句的返回值</li></ol><h2 id="_2-12-promise" tabindex="-1">2.12. Promise <a class="header-anchor" href="#_2-12-promise" aria-label="Permalink to &quot;2.12. Promise&quot;">​</a></h2><p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p><ol><li>Promise 构造函数: Promise (excutor) {}</li><li>Promise.prototype.then 方法</li><li>Promise.prototype.catch 方法</li></ol><h2 id="_2-13-set" tabindex="-1">2.13. Set <a class="header-anchor" href="#_2-13-set" aria-label="Permalink to &quot;2.13. Set&quot;">​</a></h2><p>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法：</p><ol><li>size 返回集合的元素个数</li><li>add 增加一个新元素，返回当前集合</li><li>delete 删除元素，返回 boolean 值</li><li>has 检测集合中是否包含某个元素，返回 boolean 值</li><li>clear 清空集合，返回 undefined</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//创建一个空集合</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//创建一个非空集合</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//集合属性与方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//返回集合的元素个数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//添加新元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// Set(4) { 1, 2, 3, 4 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//删除元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delete</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//检测是否存在某个值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//清空集合</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="_2-14-map" tabindex="-1">2.14. Map <a class="header-anchor" href="#_2-14-map" aria-label="Permalink to &quot;2.14. Map&quot;">​</a></h2><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map 也实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历。Map 的属性和方法：</p><ol><li>size 返回 Map 的元素个数</li><li>set 增加一个新元素，返回当前 Map</li><li>get 返回键名对象的键值</li><li>has 检测 Map 中是否包含某个元素，返回 boolean 值</li><li>clear 清空集合，返回 undefined</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//创建一个空 map</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//创建一个非空 map</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">m2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Map</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;尚硅谷&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#98C379;">&#39;slogon&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;不断提高行业标准&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//属性和方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//获取映射元素的个数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//添加映射值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//获取映射值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//检测是否有该映射</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">m2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//清除</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="_2-15-class-类" tabindex="-1">2.15. class 类 <a class="header-anchor" href="#_2-15-class-类" aria-label="Permalink to &quot;2.15. class 类&quot;">​</a></h2><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。 知识点：</p><ol><li>class 声明类</li><li>constructor 定义构造函数初始化</li><li>extends 继承父类</li><li>super 调用父级构造方法</li><li>static 定义静态方法和属性</li><li>父类方法可以重写</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//父类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Phone</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//构造方法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">brand</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">color</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">price</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">brand</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">brand</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">price</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">price</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//对象方法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我可以打电话!!!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//子类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">SmartPhone</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Phone</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">brand</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">color</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">price</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">screen</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pixel</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">brand</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">price</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">screen</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">screen</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pixel</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">pixel</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//子类方法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">photo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我可以拍照!!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">playGame</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我可以玩游戏!!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//方法重写</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我可以进行视频通话!!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//静态方法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我可以运行程序&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我可以建立连接&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//实例化对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Nokia</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Phone</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;诺基亚&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;灰色&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">230</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">iPhone6s</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">SmartPhone</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;苹果&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;白色&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6088</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;4.7inch&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;500w&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用子类方法</span></span>
<span class="line"><span style="color:#E5C07B;">iPhone6s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">playGame</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用重写方法</span></span>
<span class="line"><span style="color:#E5C07B;">iPhone6s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用静态方法</span></span>
<span class="line"><span style="color:#E5C07B;">SmartPhone</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">SmartPhone</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><h2 id="_2-16-数值扩展" tabindex="-1">2.16. 数值扩展 <a class="header-anchor" href="#_2-16-数值扩展" aria-label="Permalink to &quot;2.16. 数值扩展&quot;">​</a></h2><h3 id="_2-16-1-二进制和八进制" tabindex="-1">2.16.1. 二进制和八进制 <a class="header-anchor" href="#_2-16-1-二进制和八进制" aria-label="Permalink to &quot;2.16.1. 二进制和八进制&quot;">​</a></h3><ul><li>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示。</li></ul><h3 id="_2-16-2-number-isfinite-与-number-isnan" tabindex="-1">2.16.2. Number.isFinite() 与 Number.isNaN() <a class="header-anchor" href="#_2-16-2-number-isfinite-与-number-isnan" aria-label="Permalink to &quot;2.16.2. Number.isFinite() 与 Number.isNaN()&quot;">​</a></h3><ul><li>Number.isFinite() 用来检查一个数值是否为有限的</li><li>Number.isNaN() 用来检查一个值是否为 NaN</li></ul><h3 id="_2-16-3-number-parseint-与-number-parsefloat" tabindex="-1">2.16.3. Number.parseInt() 与 Number.parseFloat() <a class="header-anchor" href="#_2-16-3-number-parseint-与-number-parsefloat" aria-label="Permalink to &quot;2.16.3. Number.parseInt() 与 Number.parseFloat()&quot;">​</a></h3><ul><li>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变。</li></ul><h3 id="_2-16-4-math-trunc" tabindex="-1">2.16.4. Math.trunc <a class="header-anchor" href="#_2-16-4-math-trunc" aria-label="Permalink to &quot;2.16.4. Math.trunc&quot;">​</a></h3><ul><li>用于去除一个数的小数部分，返回整数部分。</li></ul><h3 id="_2-16-5-number-isinteger" tabindex="-1">2.16.5. Number.isInteger <a class="header-anchor" href="#_2-16-5-number-isinteger" aria-label="Permalink to &quot;2.16.5. Number.isInteger&quot;">​</a></h3><ul><li>Number.isInteger() 用来判断一个数值是否为整数</li></ul><h2 id="_2-17-对象扩展" tabindex="-1">2.17. 对象扩展 <a class="header-anchor" href="#_2-17-对象扩展" aria-label="Permalink to &quot;2.17. 对象扩展&quot;">​</a></h2><p>ES6 新增了一些 Object 对象的方法</p><ol><li>Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）</li><li>Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象</li><li><strong>proto</strong>、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型</li></ol><h2 id="_2-18-模块化" tabindex="-1">2.18. 模块化 <a class="header-anchor" href="#_2-18-模块化" aria-label="Permalink to &quot;2.18. 模块化&quot;">​</a></h2><ul><li>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</li></ul><h3 id="_2-18-1-模块化的好处" tabindex="-1">2.18.1. 模块化的好处 <a class="header-anchor" href="#_2-18-1-模块化的好处" aria-label="Permalink to &quot;2.18.1. 模块化的好处&quot;">​</a></h3><p>模块化的优势有以下几点：</p><ol><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ol><h3 id="_2-18-2-模块化规范产品" tabindex="-1">2.18.2. 模块化规范产品 <a class="header-anchor" href="#_2-18-2-模块化规范产品" aria-label="Permalink to &quot;2.18.2. 模块化规范产品&quot;">​</a></h3><p>ES6 之前的模块化规范有：</p><ol><li>CommonJS =&gt; NodeJS、Browserify</li><li>AMD =&gt; requireJS</li><li>CMD =&gt; seaJS</li></ol><h3 id="_2-18-3-es6-模块化语法" tabindex="-1">2.18.3. ES6 模块化语法 <a class="header-anchor" href="#_2-18-3-es6-模块化语法" aria-label="Permalink to &quot;2.18.3. ES6 模块化语法&quot;">​</a></h3><p>模块功能主要由两个命令构成：export 和 import。</p><ol><li>export 命令用于规定模块的对外接口</li><li>import 命令用于输入其他模块提供的功能</li></ol><h1 id="第-3-章-ecmasript-7-新特性" tabindex="-1">第 3 章 ECMASript 7 新特性 <a class="header-anchor" href="#第-3-章-ecmasript-7-新特性" aria-label="Permalink to &quot;第 3 章 ECMASript 7 新特性&quot;">​</a></h1><h2 id="_3-1-array-prototype-includes" tabindex="-1">3.1. Array.prototype.includes <a class="header-anchor" href="#_3-1-array-prototype-includes" aria-label="Permalink to &quot;3.1. Array.prototype.includes&quot;">​</a></h2><p>Includes 方法用来检测数组中是否包含某个元素，返回布尔类型值</p><h2 id="_3-2-指数操作符" tabindex="-1">3.2.指数操作符 <a class="header-anchor" href="#_3-2-指数操作符" aria-label="Permalink to &quot;3.2.指数操作符&quot;">​</a></h2><p>在 ES7 中引入指数运算符「**」，用来实现幂运算，功能与 Math.pow 结果相同</p><h4 id="第-4-章-ecmasript-8-新特性" tabindex="-1">第 4 章 ECMASript 8 新特性 <a class="header-anchor" href="#第-4-章-ecmasript-8-新特性" aria-label="Permalink to &quot;第 4 章 ECMASript 8 新特性&quot;">​</a></h4><h2 id="_4-1-async-和-await" tabindex="-1">4.1. async 和 await <a class="header-anchor" href="#_4-1-async-和-await" aria-label="Permalink to &quot;4.1. async 和 await&quot;">​</a></h2><p>async 和 await 两种语法结合可以让异步代码像同步代码一样</p><h3 id="_4-1-1-async-函数" tabindex="-1">4.1.1. async 函数 <a class="header-anchor" href="#_4-1-1-async-函数" aria-label="Permalink to &quot;4.1.1. async 函数&quot;">​</a></h3><ol><li>async 函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol><h3 id="_4-1-2-await-表达式" tabindex="-1">4.1.2. await 表达式 <a class="header-anchor" href="#_4-1-2-await-表达式" aria-label="Permalink to &quot;4.1.2. await 表达式&quot;">​</a></h3><ol><li>await 必须写在 async 函数中</li><li>await 右侧的表达式一般为 promise 对象</li><li>await 返回的是 promise 成功的值</li><li>await 的 promise 失败了, 就会抛出异常, 需要通过 try...catch 捕获处理</li></ol><h2 id="_4-2-object-values-和-object-entries" tabindex="-1">4.2. Object.values 和 Object.entries <a class="header-anchor" href="#_4-2-object-values-和-object-entries" aria-label="Permalink to &quot;4.2. Object.values 和 Object.entries&quot;">​</a></h2><ol><li>Object.values()方法返回一个给定对象的所有可枚举属性值的数组</li><li>Object.entries()方法返回一个给定对象自身可遍历属性 [key,value] 的数组</li></ol><h2 id="_4-3-object-getownpropertydescriptors" tabindex="-1">4.3. Object.getOwnPropertyDescriptors <a class="header-anchor" href="#_4-3-object-getownpropertydescriptors" aria-label="Permalink to &quot;4.3. Object.getOwnPropertyDescriptors&quot;">​</a></h2><ul><li>该方法返回指定对象所有自身属性的描述对象</li></ul><h1 id="第-5-章-ecmasript-9-新特性" tabindex="-1">第 5 章 ECMASript 9 新特性 <a class="header-anchor" href="#第-5-章-ecmasript-9-新特性" aria-label="Permalink to &quot;第 5 章 ECMASript 9 新特性&quot;">​</a></h1><h2 id="_5-1-rest-spread-属性" tabindex="-1">5.1. Rest/Spread 属性 <a class="header-anchor" href="#_5-1-rest-spread-属性" aria-label="Permalink to &quot;5.1. Rest/Spread 属性&quot;">​</a></h2><p>Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，在 ES9 中为对象提供了像数组一样的 rest 参数和扩展运算符</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">host</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">port</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">host</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 127.0.0.1</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">port</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 3306</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { username: &#39;root&#39;, password: &#39;root&#39;, type: &#39;master&#39; }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;master&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>ES9 允许命名捕获组使用符号『?&lt;\\name&gt;』，这样获取捕获结果可读性更强</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&lt;a href=&quot;http://www.atguigu.com&quot;&gt;尚硅谷&lt;/a&gt;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /&lt;a href=&quot;(?&lt;url&gt;.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">)&quot;&gt;(?&lt;text&gt;.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">)&lt;</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">a&gt;/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">groups</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// http://www.atguigu.com</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">groups</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 尚硅谷</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">/&lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">href</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;(?&lt;url&gt;.*)&quot;</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">&gt;.*)&lt;\\\\/a&gt;/ | 正则表达式模式，使用斜杠 / 围绕。 |</span></span>
<span class="line"><span style="color:#ABB2BF;">| --- | --- |</span></span>
<span class="line"><span style="color:#ABB2BF;">| &lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">href</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot; | 匹配 &lt;a href=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">字符串。</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">|</span></span>
<span class="line"><span style="color:#FFFFFF;">|</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">(?&lt;url&gt;.*)</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">|</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">命名捕获组，匹配任意字符（链接），并将结果保存到名为</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">url</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">的捕获组中。</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">|</span></span>
<span class="line"><span style="color:#FFFFFF;">|</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&gt; | 匹配 &quot;</span><span style="color:#ABB2BF;">&gt; 字符串。 |</span></span>
<span class="line"><span style="color:#ABB2BF;">| (?&lt;</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">&gt;.*) | 命名捕获组，匹配任意字符（文本内容），并将结果保存到名为 text 的捕获组中。 |</span></span>
<span class="line"><span style="color:#ABB2BF;">| &lt;\\\\/a&gt; | 匹配 &lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt; 字符串，需要使用转义字符 \\\\ 对斜杠进行转义。 |</span></span>
<span class="line"><span style="color:#ABB2BF;">| reg.exec(str) | 通过正则表达式执行 str 字符串的匹配。 |</span></span>
<span class="line"><span style="color:#ABB2BF;">| result.groups.url | 提取匹配结果中的 url 捕获组值。 |</span></span>
<span class="line"><span style="color:#ABB2BF;">| result.groups.text | 提取匹配结果中的 text 捕获组值。 |</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="_5-3-正则表达式反向断言" tabindex="-1">5.3.正则表达式反向断言 <a class="header-anchor" href="#_5-3-正则表达式反向断言" aria-label="Permalink to &quot;5.3.正则表达式反向断言&quot;">​</a></h2><p>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//声明字符串</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;JS5211314 你知道么 555 啦啦啦&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//正向断言</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /\\d</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">(?=啦)/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//反向断言</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /(?&lt;=么)\\d</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">result2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_5-4-正则表达式-dotall-模式" tabindex="-1">5.4. 正则表达式 dotAll 模式 <a class="header-anchor" href="#_5-4-正则表达式-dotall-模式" aria-label="Permalink to &quot;5.4. 正则表达式 dotAll 模式&quot;">​</a></h2><p>正则表达式中点.匹配除回车外的任何单字符，标记『s』改变这种行为，允许行终止符出现</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;ul&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;li&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;/li&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;li&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;/li&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&lt;/ul&gt;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//声明正则</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /&lt;li&gt;.</span><span style="color:#D19A66;">*?</span><span style="color:#E06C75;">&lt;a&gt;(.</span><span style="color:#D19A66;">*?</span><span style="color:#E06C75;">)&lt;</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">a&gt;.</span><span style="color:#D19A66;">*?</span><span style="color:#E06C75;">&lt;p&gt;(.</span><span style="color:#D19A66;">*?</span><span style="color:#E06C75;">)&lt;</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">p&gt;/</span><span style="color:#C678DD;">gs</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//执行匹配</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">))) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//输出结果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [ { title: &#39;阿甘正传&#39;, time: &#39;上映日期: 1994-07-06&#39; } ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h1 id="第-6-章-ecmasript-10-新特性" tabindex="-1">第 6 章 ECMASript 10 新特性 <a class="header-anchor" href="#第-6-章-ecmasript-10-新特性" aria-label="Permalink to &quot;第 6 章 ECMASript 10 新特性&quot;">​</a></h1><h2 id="_6-1-object-fromentries" tabindex="-1">6.1. Object.fromEntries <a class="header-anchor" href="#_6-1-object-fromentries" aria-label="Permalink to &quot;6.1. Object.fromEntries&quot;">​</a></h2><p>Object.fromEntries 这个新的 API 实现了与 Object.entries 相反的操作。这使得根据对象的 entries 很容易得到 object</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">object</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">entries</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// → [[&#39;x&#39;, 42], [&#39;y&#39;, 50]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromEntries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">entries</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// → { x: 42, y: 50 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>一个常见的用法就是转换对象。现在可以通过遍历它的 entries，然后使用您可能已经熟悉的数组方法来实现这一点</p><h2 id="_6-2-trimstart-和-trimend" tabindex="-1">6.2. trimStart 和 trimEnd <a class="header-anchor" href="#_6-2-trimstart-和-trimend" aria-label="Permalink to &quot;6.2. trimStart 和 trimEnd&quot;">​</a></h2><h3 id="_6-2-1-trim" tabindex="-1">6.2.1 trim <a class="header-anchor" href="#_6-2-1-trim" aria-label="Permalink to &quot;6.2.1 trim&quot;">​</a></h3><p>方法可以移除字符串前后两端的空白字符。 语法：str.trim() 返回值：返回一个移除原字符串头尾空白字符的新字符串，不会改变原字符串</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;  hello word  &#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;@&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// @hello word@</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-2-2-trimstart" tabindex="-1">6.2.2 trimStart <a class="header-anchor" href="#_6-2-2-trimstart" aria-label="Permalink to &quot;6.2.2 trimStart&quot;">​</a></h3><p>方法可以移除字符串头部的空白字符。 语法：str.trimStart() 返回值：移除原字符串头部空白字符后的新字符串，不会改变原字符串</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;  hello word  &#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;@&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trimStart</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// @hello word  @</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-2-3-trimend" tabindex="-1">6.2.3 trimEnd <a class="header-anchor" href="#_6-2-3-trimend" aria-label="Permalink to &quot;6.2.3 trimEnd&quot;">​</a></h3><p>trimEnd 方法可以移除字符串尾部的空白字符。 语法：str.trimEnd() 返回值：移除原字符串尾部空白字符后的新字符串，不会改变原字符串</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;  hello word  &#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;@&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trimEnd</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// @  hello word@</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_6-3-array-prototype-flat-与-flatmap" tabindex="-1">6.3. Array.prototype.flat 与 flatMap <a class="header-anchor" href="#_6-3-array-prototype-flat-与-flatmap" aria-label="Permalink to &quot;6.3. Array.prototype.flat 与 flatMap&quot;">​</a></h2><h3 id="_6-3-1-flat" tabindex="-1">6.3.1 flat() <a class="header-anchor" href="#_6-3-1-flat" aria-label="Permalink to &quot;6.3.1 flat()&quot;">​</a></h3><p>Array.prototype.flat()的 flat 其实是「flattens」的简写，有展开、摊平的意思。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flat</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// [1, 2, 3, 4, 5, 6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果想全部摊平，就要使用 flat()的参数 depth：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">], [</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">], [[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">]]];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flat</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// [1, 2, 3, 4, 5, 6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-3-1-flatmap" tabindex="-1">6.3.1 flatMap() <a class="header-anchor" href="#_6-3-1-flatmap" aria-label="Permalink to &quot;6.3.1 flatMap()&quot;">​</a></h3><p>Array.prototype.flatMap 方法首先使用 map 函数映射数组的每个元素，然后再为每个元素调用一下 flat 函数，相当于先 map 后 flat 。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 flatMap</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flatMap</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// [2, 4, 6, 8]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 相当于调用 map 后调用 flat</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// [[2], [4], [6], [8]]</span></span>
<span class="line"><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flat</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// [2, 4, 6, 8]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_6-4-symbol-prototype-description" tabindex="-1">6.4. Symbol.prototype.description <a class="header-anchor" href="#_6-4-symbol-prototype-description" aria-label="Permalink to &quot;6.4. Symbol.prototype.description&quot;">​</a></h2><p>创建 Symbol 的时候，可以添加一个描述。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码中，sym 的描述就是字符串 foo。但是，读取这个描述需要将 Symbol 显式转为字符串，即下面的写法。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sym</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;Symbol(foo)&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// &quot;Symbol(foo)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面的用法不是很方便。<a href="https://github.com/tc39/proposal-Symbol-description" target="_blank" rel="noreferrer">ES2019</a> 提供了一个实例属性 description，直接返回 Symbol 的描述。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;foo&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="第-7-章-ecmasript-11-新特性" tabindex="-1">第 7 章 ECMASript 11 新特性 <a class="header-anchor" href="#第-7-章-ecmasript-11-新特性" aria-label="Permalink to &quot;第 7 章 ECMASript 11 新特性&quot;">​</a></h1><h2 id="_7-1-string-prototype-matchall" tabindex="-1">7.1. String.prototype.matchAll <a class="header-anchor" href="#_7-1-string-prototype-matchall" aria-label="Permalink to &quot;7.1. String.prototype.matchAll&quot;">​</a></h2><p>可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;test1test2test3&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// g 修饰符加不加都可以</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">regex</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">/t(e)(st(\\d</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">))/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">match</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">matchAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">regex</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">match</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;, index: 0, input: &quot;test1test2test3&quot;]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;, index: 5, input: &quot;test1test2test3&quot;]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [&quot;test3&quot;, &quot;e&quot;, &quot;st3&quot;, &quot;3&quot;, index: 10, input: &quot;test1test2test3&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码中，由于 string.matchAll(regex)返回的是遍历器，所以可以用 for...of 循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。 遍历器转为数组是非常简单的，使用...运算符和 Array.from()方法就可以了。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 转为数组方法一</span></span>
<span class="line"><span style="color:#ABB2BF;">[...</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">matchAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">regex</span><span style="color:#ABB2BF;">)];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 转为数组方法二</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">matchAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">regex</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_7-2-类的私有属性" tabindex="-1">7.2. 类的私有属性 <a class="header-anchor" href="#_7-2-类的私有属性" aria-label="Permalink to &quot;7.2. 类的私有属性&quot;">​</a></h2><h2 id="_7-3-promise-allsettled" tabindex="-1">7.3. Promise.allSettled <a class="header-anchor" href="#_7-3-promise-allsettled" aria-label="Permalink to &quot;7.3. Promise.allSettled&quot;">​</a></h2><p>有时候，我们不关心异步操作的结果，只关心这些操作有没有结束。这时，Promise.allSettled()方法就很有用。如果没有这个方法，想要确保所有操作都结束，就很麻烦。Promise.all()方法无法做到这一点。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">urls</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">requests</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">urls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">requests</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;所有请求都成功。&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;至少一个请求失败，其他请求可能还没结束。&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_7-4-可选链操作符" tabindex="-1">7.4.可选链操作符 <a class="header-anchor" href="#_7-4-可选链操作符" aria-label="Permalink to &quot;7.4.可选链操作符&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//undefined</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; undefined.b 会报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可选链操作符使用 <strong>?.</strong> 来表示，可以判断操作符之前属性是否有效，从而链式读取对象的属性或返回 undefined。 作用与 . 操作符类似。不同的是 ?. 如果对象链上的引用是 null 或者 undefined 时， . 操作符会像前言中的例子抛出一个错误，而 ?. 操作符则会按照短路计算的方式进行处理，返回 undefined。可选链操作符也可用于函数调用，如果操作符前的函数不存在，也将会返回 undefined。下面我们来看它的使用语法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Kira&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">address</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;beijing&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">other</span><span style="color:#ABB2BF;">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);	</span><span style="color:#7F848E;font-style:italic;">// Kira</span></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);	</span><span style="color:#7F848E;font-style:italic;">// =&gt; window.a?.b =&gt; undefined</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">address</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">);		</span><span style="color:#7F848E;font-style:italic;">// beijing</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">address</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">other</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);	</span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_7-5-动态-import-导入" tabindex="-1">7.5. 动态 import 导入 <a class="header-anchor" href="#_7-5-动态-import-导入" aria-label="Permalink to &quot;7.5. 动态 import 导入&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">specifier</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码中，import 函数的参数 specifier，指定所要加载的模块的位置。import 命令能够接受什么参数，import()函数就能接受什么参数，两者区别主要是后者为动态加载。 import()返回一个 Promise 对象。下面是一个例子。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">main</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;main&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`./section-modules/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">someVariable</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.js\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadPageInto</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">main</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_7-5-1-适用场合" tabindex="-1">7.5.1 适用场合 <a class="header-anchor" href="#_7-5-1-适用场合" aria-label="Permalink to &quot;7.5.1 适用场合&quot;">​</a></h3><ol><li>按需加载：import()可以在需要的时候，再加载某个模块。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">button</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./dialogBox.js&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">dialogBox</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">dialogBox</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">/* Error handling */</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码中，import()方法放在 click 事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。</p><ol start="2"><li>条件加载：import()可以放在 if 代码块，根据不同的情况，加载不同的模块。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">condition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;moduleA&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(...);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;moduleB&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(...);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码中，如果满足条件，就加载模块 A，否则加载模块 B。</p><ol start="3"><li>动态的模块路径：import()允许模块路径动态生成。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(...);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面代码中，根据函数 <strong>f()</strong> 的返回结果，加载不同的模块。</p><h2 id="_7-6-globalthis-对象" tabindex="-1">7.6. globalThis 对象 <a class="header-anchor" href="#_7-6-globalthis-对象" aria-label="Permalink to &quot;7.6. globalThis 对象&quot;">​</a></h2><p>引入 globalThis 作为顶层对象。也就是说，任何环境下，globalThis 都是存在的，都可以从它拿到顶层对象，指向全局环境下的 this。</p>`,194),e=[o];function r(t,c,B,i,y,F){return n(),a("div",null,e)}const u=s(p,[["render",r]]);export{A as __pageData,u as default};
